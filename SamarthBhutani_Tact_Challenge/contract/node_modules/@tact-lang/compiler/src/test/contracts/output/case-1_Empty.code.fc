#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "case-1_Empty.headers.fc";
#include "case-1_Empty.stdlib.fc";
#include "case-1_Empty.storage.fc";

;;
;; Contract Empty functions
;;

tuple $Empty$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

int $global_isZero(int $x, int $y, int $z, (int, int, int, int) $m) impure inline_ref {
    var (($m'a, $m'b, $m'c, $m'd)) = $m;
    int $b = ($x + $y);
    $b = ((($b + 1) + $m'a) + $m'b);
    int $c = ($y >> 123);
    int $d = ($x << 10);
    return ( (( (( (($b > 0)) ? ($z) : (false) )) ? (($c == 0)) : (false) )) ? (($d == 0)) : (false) );
}

(tuple, int) $Empty$_fun_a(tuple $self, int $x, int $y, int $z, (int, int, int, int) $m) impure inline_ref {
    var ($self) = $self;
    var (($m'a, $m'b, $m'c, $m'd)) = $m;
    return ($self, $global_isZero($x, $y, $z, ($m'a, $m'b, $m'c, $m'd)));
}

;;
;; Receivers of a Contract Empty
;;

;;
;; Get methods of a Contract Empty
;;

_ %a(int $$x, int $$y, int $$z, tuple $$m) method_id(97415) {
    int $x = $$x;
    int $y = $$y;
    int $z = $$z;
    (int, int, int, int) $m = $Source$_from_tuple($$m);
    var self = $Empty$_contract_load();
    var res = self~$Empty$_fun_a($x, $y, $z, $m);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmevJcAufvYYaafzMzpw6wHJNmfVhyBDgoFah3UnM8HNxx";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Empty
;;

(tuple, int) $Empty$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Empty$_contract_load();
    
    ;; Handle operation
    int handled = self~$Empty$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Empty$_contract_store(self);
}
