#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "math_MathTester.headers.fc";
#include "math_MathTester.stdlib.fc";
#include "math_MathTester.storage.fc";

;;
;; Contract MathTester functions
;;

tuple $MathTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, int) $MathTester$_fun_add(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a + $b));
}

(tuple, int) $MathTester$_fun_sub(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a - $b));
}

(tuple, int) $MathTester$_fun_mul(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a * $b));
}

(tuple, int) $MathTester$_fun_div(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a / $b));
}

(tuple, int) $MathTester$_fun_mod(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a % $b));
}

(tuple, int) $MathTester$_fun_shr(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a >> $b));
}

(tuple, int) $MathTester$_fun_shl(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a << $b));
}

(tuple, int) $MathTester$_fun_and(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a & $b));
}

(tuple, int) $MathTester$_fun_or(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a | $b));
}

(tuple, int) $MathTester$_fun_compare1(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_int_eq_nullable_one($b, $a));
}

(tuple, int) $MathTester$_fun_compare2(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_int_neq_nullable_one($b, $a));
}

(tuple, int) $MathTester$_fun_compare3(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_int_eq_nullable_one($a, $b));
}

(tuple, int) $MathTester$_fun_compare4(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_int_neq_nullable_one($a, $b));
}

(tuple, int) $MathTester$_fun_compare5(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_int_eq_nullable($a, $b));
}

(tuple, int) $MathTester$_fun_compare6(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_int_neq_nullable($a, $b));
}

(tuple, int) $MathTester$_fun_compare7(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a > $b));
}

(tuple, int) $MathTester$_fun_compare8(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a >= $b));
}

(tuple, int) $MathTester$_fun_compare9(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a < $b));
}

(tuple, int) $MathTester$_fun_compare10(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ($a <= $b));
}

(tuple, int) $MathTester$_fun_compare11(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( __tact_slice_eq_bits($b, $a) ));
}

(tuple, int) $MathTester$_fun_compare12(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( __tact_slice_eq_bits_nullable_one($b, $a) ));
}

(tuple, int) $MathTester$_fun_compare13(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( __tact_slice_eq_bits_nullable_one($a, $b) ));
}

(tuple, int) $MathTester$_fun_compare14(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( __tact_slice_eq_bits_nullable($a, $b) ));
}

(tuple, int) $MathTester$_fun_compare15(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( ~ __tact_slice_eq_bits($b, $a) ));
}

(tuple, int) $MathTester$_fun_compare16(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( ~ __tact_slice_eq_bits_nullable_one($b, $a) ));
}

(tuple, int) $MathTester$_fun_compare17(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( ~ __tact_slice_eq_bits_nullable_one($a, $b) ));
}

(tuple, int) $MathTester$_fun_compare18(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    return ($self, ( ~ __tact_slice_eq_bits_nullable($a, $b) ));
}

(tuple, int) $MathTester$_fun_compare19(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_eq($b, $a));
}

(tuple, int) $MathTester$_fun_compare20(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_eq_nullable_one($b, $a));
}

(tuple, int) $MathTester$_fun_compare21(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_eq_nullable_one($a, $b));
}

(tuple, int) $MathTester$_fun_compare22(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_eq_nullable($a, $b));
}

(tuple, int) $MathTester$_fun_compare23(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_neq($b, $a));
}

(tuple, int) $MathTester$_fun_compare24(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_neq_nullable_one($b, $a));
}

(tuple, int) $MathTester$_fun_compare25(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_neq_nullable_one($a, $b));
}

(tuple, int) $MathTester$_fun_compare26(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_neq_nullable($a, $b));
}

(tuple, int) $MathTester$_fun_compare27(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_eq_nullable($a, $b));
}

(tuple, int) $MathTester$_fun_compare28(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_cell_neq_nullable($a, $b));
}

(tuple, int) $MathTester$_fun_isNull1(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    return ($self, null?($a));
}

(tuple, int) $MathTester$_fun_isNotNull1(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    return ($self, (~ null?($a)));
}

(tuple, int) $MathTester$_fun_isNull2(tuple $self, slice $address) impure inline_ref {
    var ($self) = $self;
    return ($self, null?($address));
}

(tuple, int) $MathTester$_fun_isNotNull2(tuple $self, slice $address) impure inline_ref {
    var ($self) = $self;
    return ($self, (~ null?($address)));
}

(tuple, int) $MathTester$_fun_isNull3(tuple $self, cell $cell) impure inline_ref {
    var ($self) = $self;
    return ($self, null?($cell));
}

(tuple, int) $MathTester$_fun_isNotNull3(tuple $self, cell $cell) impure inline_ref {
    var ($self) = $self;
    return ($self, (~ null?($cell)));
}

;;
;; Receivers of a Contract MathTester
;;

((tuple), ()) $MathTester$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$MathTester$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract MathTester
;;

_ %add(int $$a, int $$b) method_id(83863) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_add($a, $b);
    return res;
}

_ %sub(int $$a, int $$b) method_id(80400) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_sub($a, $b);
    return res;
}

_ %mul(int $$a, int $$b) method_id(99260) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mul($a, $b);
    return res;
}

_ %div(int $$a, int $$b) method_id(125000) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_div($a, $b);
    return res;
}

_ %mod(int $$a, int $$b) method_id(126476) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mod($a, $b);
    return res;
}

_ %shr(int $$a, int $$b) method_id(89358) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_shr($a, $b);
    return res;
}

_ %shl(int $$a, int $$b) method_id(110321) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_shl($a, $b);
    return res;
}

_ %and(int $$a, int $$b) method_id(108636) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_and($a, $b);
    return res;
}

_ %or(int $$a, int $$b) method_id(83393) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_or($a, $b);
    return res;
}

_ %compare1(int $$a, int $$b) method_id(80704) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare1($a, $b);
    return res;
}

_ %compare2(int $$a, int $$b) method_id(68387) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare2($a, $b);
    return res;
}

_ %compare3(int $$a, int $$b) method_id(72450) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare3($a, $b);
    return res;
}

_ %compare4(int $$a, int $$b) method_id(93157) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare4($a, $b);
    return res;
}

_ %compare5(int $$a, int $$b) method_id(97220) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare5($a, $b);
    return res;
}

_ %compare6(int $$a, int $$b) method_id(84903) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare6($a, $b);
    return res;
}

_ %compare7(int $$a, int $$b) method_id(88966) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare7($a, $b);
    return res;
}

_ %compare8(int $$a, int $$b) method_id(109161) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare8($a, $b);
    return res;
}

_ %compare9(int $$a, int $$b) method_id(113224) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare9($a, $b);
    return res;
}

_ %compare10(int $$a, int $$b) method_id(127339) {
    int $a = $$a;
    int $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare10($a, $b);
    return res;
}

_ %compare11(slice $$a, slice $$b) method_id(123210) {
    slice $a = __tact_verify_address($$a);
    slice $b = __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare11($a, $b);
    return res;
}

_ %compare12(slice $$a, slice $$b) method_id(119081) {
    slice $a = __tact_verify_address($$a);
    slice $b = null?($$b) ? null() : __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare12($a, $b);
    return res;
}

_ %compare13(slice $$a, slice $$b) method_id(114952) {
    slice $a = null?($$a) ? null() : __tact_verify_address($$a);
    slice $b = __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare13($a, $b);
    return res;
}

_ %compare14(slice $$a, slice $$b) method_id(111087) {
    slice $a = null?($$a) ? null() : __tact_verify_address($$a);
    slice $b = null?($$b) ? null() : __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare14($a, $b);
    return res;
}

_ %compare15(slice $$a, slice $$b) method_id(106958) {
    slice $a = __tact_verify_address($$a);
    slice $b = __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare15($a, $b);
    return res;
}

_ %compare16(slice $$a, slice $$b) method_id(102829) {
    slice $a = __tact_verify_address($$a);
    slice $b = null?($$b) ? null() : __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare16($a, $b);
    return res;
}

_ %compare17(slice $$a, slice $$b) method_id(98700) {
    slice $a = null?($$a) ? null() : __tact_verify_address($$a);
    slice $b = __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare17($a, $b);
    return res;
}

_ %compare18(slice $$a, slice $$b) method_id(94307) {
    slice $a = null?($$a) ? null() : __tact_verify_address($$a);
    slice $b = null?($$b) ? null() : __tact_verify_address($$b);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare18($a, $b);
    return res;
}

_ %compare19(cell $$a, cell $$b) method_id(90178) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare19($a, $b);
    return res;
}

_ %compare20(cell $$a, cell $$b) method_id(107576) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare20($a, $b);
    return res;
}

_ %compare21(cell $$a, cell $$b) method_id(111641) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare21($a, $b);
    return res;
}

_ %compare22(cell $$a, cell $$b) method_id(99450) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare22($a, $b);
    return res;
}

_ %compare23(cell $$a, cell $$b) method_id(103515) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare23($a, $b);
    return res;
}

_ %compare24(cell $$a, cell $$b) method_id(124092) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare24($a, $b);
    return res;
}

_ %compare25(cell $$a, cell $$b) method_id(128157) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare25($a, $b);
    return res;
}

_ %compare26(cell $$a, cell $$b) method_id(115966) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare26($a, $b);
    return res;
}

_ %compare27(cell $$a, cell $$b) method_id(120031) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare27($a, $b);
    return res;
}

_ %compare28(cell $$a, cell $$b) method_id(75056) {
    cell $a = $$a;
    cell $b = $$b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare28($a, $b);
    return res;
}

_ %isNull1(int $$a) method_id(111973) {
    int $a = $$a;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNull1($a);
    return res;
}

_ %isNotNull1(int $$a) method_id(89158) {
    int $a = $$a;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNotNull1($a);
    return res;
}

_ %isNull2(slice $$address) method_id(99590) {
    slice $address = null?($$address) ? null() : __tact_verify_address($$address);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNull2($address);
    return res;
}

_ %isNotNull2(slice $$address) method_id(93221) {
    slice $address = null?($$address) ? null() : __tact_verify_address($$address);
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNotNull2($address);
    return res;
}

_ %isNull3(cell $$cell) method_id(103719) {
    cell $cell = $$cell;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNull3($cell);
    return res;
}

_ %isNotNull3(cell $$cell) method_id(97284) {
    cell $cell = $$cell;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNotNull3($cell);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQEqAX7YospM3CwBYdt1fkEDDqnjys5FtJHxWeaZcmMA6";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MathTester
;;

(tuple, int) $MathTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$MathTester$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MathTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$MathTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MathTester$_contract_store(self);
}
