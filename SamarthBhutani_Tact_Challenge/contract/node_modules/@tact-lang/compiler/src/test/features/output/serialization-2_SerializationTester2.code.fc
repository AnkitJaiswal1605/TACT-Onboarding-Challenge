#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "serialization-2_SerializationTester2.headers.fc";
#include "serialization-2_SerializationTester2.stdlib.fc";
#include "serialization-2_SerializationTester2.storage.fc";

;;
;; Contract SerializationTester2 functions
;;

((int, int, int, int, int), (int, int, int, int, int)) $SerializationTester2$_contract_init((int, int, int, int, int) $a, (int, int, int, int, int) $b) impure inline_ref {
    var (($a'a, $a'b, $a'c, $a'd, $a'e)) = $a;
    var (($b'a, $b'b, $b'c, $b'd, $b'e)) = $b;
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = (null(), null());
    ($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e) = ($a'a, $a'b, $a'c, $a'd, $a'e);
    ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e) = ($b'a, $b'b, $b'c, $b'd, $b'e);
    return (($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e));
}

(((int, int, int, int, int), (int, int, int, int, int)), (int, int, int, int, int)) $SerializationTester2$_fun_getA(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), ($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e));
}

(((int, int, int, int, int), (int, int, int, int, int)), tuple) $SerializationTester2$_fun_getAopt(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), $Vars$_as_optional(($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e)));
}

(((int, int, int, int, int), (int, int, int, int, int)), (int, int, int, int, int)) $SerializationTester2$_fun_getB(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e));
}

(((int, int, int, int, int), (int, int, int, int, int)), tuple) $SerializationTester2$_fun_getBopt(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), $Vars$_as_optional(($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)));
}

(((int, int, int, int, int), (int, int, int, int, int)), ((int, int, int, int, int), (int, int, int, int, int))) $SerializationTester2$_fun_getBoth(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), $Both$_constructor_a_b(($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)));
}

(((int, int, int, int, int), (int, int, int, int, int)), tuple) $SerializationTester2$_fun_getBothOpt(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), $Both$_as_optional($Both$_constructor_a_b(($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))));
}

(((int, int, int, int, int), (int, int, int, int, int)), (int, int, int, int, int)) $SerializationTester2$_fun_process(((int, int, int, int, int), (int, int, int, int, int)) $self, (int, int, int, int, int) $src, ((int, int, int, int, int), (int, int, int, int, int)) $both, tuple $both2) impure inline_ref {
    var ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e))) = $self;
    var (($src'a, $src'b, $src'c, $src'd, $src'e)) = $src;
    var ((($both'a'a, $both'a'b, $both'a'c, $both'a'd, $both'a'e), ($both'b'a, $both'b'b, $both'b'c, $both'b'd, $both'b'e))) = $both;
    var ($both2) = $both2;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), $Vars$_constructor_a_b_c_d_e(($src'a + 1), ($src'b + 2), ($src'c + 3), ($src'd + 4), ($src'e + 5)));
}

;;
;; Receivers of a Contract SerializationTester2
;;

((((int, int, int, int, int), (int, int, int, int, int))), ()) %$SerializationTester2$_internal_empty(((int, int, int, int, int), (int, int, int, int, int)) $self) impure inline {
    var (($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)) = $self;
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), ());
}

((((int, int, int, int, int), (int, int, int, int, int))), ()) $SerializationTester2$_internal_binary_Update(((int, int, int, int, int), (int, int, int, int, int)) $self, ((int, int, int, int, int), (int, int, int, int, int)) $msg) impure inline {
    var (($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)) = $self;
    var (($msg'a'a, $msg'a'b, $msg'a'c, $msg'a'd, $msg'a'e), ($msg'b'a, $msg'b'b, $msg'b'c, $msg'b'd, $msg'b'e)) = $msg;
    ($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e) = ($msg'a'a, $msg'a'b, $msg'a'c, $msg'a'd, $msg'a'e);
    ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e) = ($msg'b'a, $msg'b'b, $msg'b'c, $msg'b'd, $msg'b'e);
    return ((($self'a'a, $self'a'b, $self'a'c, $self'a'd, $self'a'e), ($self'b'a, $self'b'b, $self'b'c, $self'b'd, $self'b'e)), ());
}

;;
;; Get methods of a Contract SerializationTester2
;;

_ %getA() method_id(123932) {
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_getA();
    return $Vars$_to_external(res);
}

_ %getAopt() method_id(113663) {
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_getAopt();
    return $Vars$_to_opt_external(res);
}

_ %getB() method_id(119935) {
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_getB();
    return $Vars$_to_external(res);
}

_ %getBopt() method_id(73763) {
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_getBopt();
    return $Vars$_to_opt_external(res);
}

_ %getBoth() method_id(81754) {
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_getBoth();
    return $Both$_to_external(res);
}

_ %getBothOpt() method_id(69430) {
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_getBothOpt();
    return $Both$_to_opt_external(res);
}

_ %process(tuple $$src, tuple $$both, tuple $$both2) method_id(104435) {
    (int, int, int, int, int) $src = $Vars$_from_tuple($$src);
    ((int, int, int, int, int), (int, int, int, int, int)) $both = $Both$_from_tuple($$both);
    tuple $both2 = $Both$_from_opt_tuple($$both2);
    var self = $SerializationTester2$_contract_load();
    var res = self~$SerializationTester2$_fun_process($src, $both, $both2);
    return $Vars$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQwtBcS8Q8n1BhHBLTTvMTnWRMWgTfKm4PG6heD1kCUDU";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SerializationTester2
;;

(((int, int, int, int, int), (int, int, int, int, int)), int) $SerializationTester2$_contract_router_internal(((int, int, int, int, int), (int, int, int, int, int)) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$SerializationTester2$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Update message
    if (op == 2732768933) {
        var msg = in_msg~$Update$_load();
        self~$SerializationTester2$_internal_binary_Update(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SerializationTester2$_contract_load();
    
    ;; Handle operation
    int handled = self~$SerializationTester2$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SerializationTester2$_contract_store(self);
}
