;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: EntryFirst
;; Header: 0xa45b74a8
;; TLB: entry_first#a45b74a8 amountToAdd:uint32 toAddress:address = EntryFirst
;;

(slice, ((int, slice))) $EntryFirst$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2757457064);
    var v'amountToAdd = sc_0~load_uint(32);
    var v'toAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amountToAdd, v'toAddress));
}

;;
;; Type: EntrySecond
;; Header: 0xff40dc10
;; TLB: entry_second#ff40dc10 amountToAdd:uint32 toAddress:address = EntrySecond
;;

(slice, ((int, slice))) $EntrySecond$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4282440720);
    var v'amountToAdd = sc_0~load_uint(32);
    var v'toAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amountToAdd, v'toAddress));
}

;;
;; Type: First
;; Header: 0xbec08f38
;; TLB: first#bec08f38 amount:uint32 myCoins:coins myBool3:bool anAddress:address = First
;;

builder $First$_store(builder build_0, (int, int, int, slice) v) inline {
    var (v'amount, v'myCoins, v'myBool3, v'anAddress) = v;
    build_0 = store_uint(build_0, 3200290616, 32);
    build_0 = build_0.store_uint(v'amount, 32);
    build_0 = build_0.store_coins(v'myCoins);
    build_0 = build_0.store_int(v'myBool3, 1);
    build_0 = __tact_store_address(build_0, v'anAddress);
    return build_0;
}

cell $First$_store_cell((int, int, int, slice) v) inline {
    return $First$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, slice))) $First$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3200290616);
    var v'amount = sc_0~load_uint(32);
    var v'myCoins = sc_0~load_coins();
    var v'myBool3 = sc_0~load_int(1);
    var v'anAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'myCoins, v'myBool3, v'anAddress));
}

(slice, ((int, int, int))) $First$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3200290616);
    var v'amount = sc_0~load_uint(32);
    var v'myCoins = sc_0~load_coins();
    var v'myBool3 = sc_0~load_int(1);
    return (sc_0, (v'amount, v'myCoins, v'myBool3));
}

((int, int, int, slice)) $First$_constructor_amount_myCoins_myBool3_anAddress(int amount, int myCoins, int myBool3, slice anAddress) inline {
    return (amount, myCoins, myBool3, anAddress);
}

;;
;; Type: MyStruct
;; TLB: _ amount:int257 = MyStruct
;;

builder $MyStruct$_store(builder build_0, (int) v) inline {
    var (v'amount) = v;
    build_0 = build_0.store_int(v'amount, 257);
    return build_0;
}

(slice, ((int))) $MyStruct$_load(slice sc_0) inline {
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

((int)) $MyStruct$_constructor_amount(int amount) inline {
    return (amount);
}

;;
;; Type: Second
;; Header: 0x17571ec8
;; TLB: second#17571ec8 amount_bigger:uint64 myBool:bool thisDoesNotFit:uint256 myAddress:address myBool2:bool myStruct:MyStruct{amount:int257} myStruct2:MyStruct{amount:int257} = Second
;;

builder $Second$_store(builder build_0, (int, int, int, slice, int, (int), (int)) v) inline_ref {
    var (v'amount_bigger, v'myBool, v'thisDoesNotFit, v'myAddress, v'myBool2, (v'myStruct'amount), (v'myStruct2'amount)) = v;
    build_0 = store_uint(build_0, 391585480, 32);
    build_0 = build_0.store_uint(v'amount_bigger, 64);
    build_0 = build_0.store_int(v'myBool, 1);
    build_0 = build_0.store_uint(v'thisDoesNotFit, 256);
    build_0 = __tact_store_address(build_0, v'myAddress);
    build_0 = build_0.store_int(v'myBool2, 1);
    build_0 = $MyStruct$_store(build_0, (v'myStruct'amount));
    var build_1 = begin_cell();
    build_1 = $MyStruct$_store(build_1, (v'myStruct2'amount));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $Second$_store_cell((int, int, int, slice, int, (int), (int)) v) inline {
    return $Second$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, slice, int, (int), (int)))) $Second$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 391585480);
    var v'amount_bigger = sc_0~load_uint(64);
    var v'myBool = sc_0~load_int(1);
    var v'thisDoesNotFit = sc_0~load_uint(256);
    var v'myAddress = sc_0~__tact_load_address();
    var v'myBool2 = sc_0~load_int(1);
    var v'myStruct = sc_0~$MyStruct$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'myStruct2 = sc_1~$MyStruct$_load();
    return (sc_0, (v'amount_bigger, v'myBool, v'thisDoesNotFit, v'myAddress, v'myBool2, v'myStruct, v'myStruct2));
}

(slice, ((int, int))) $Second$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 391585480);
    var v'amount_bigger = sc_0~load_uint(64);
    var v'myBool = sc_0~load_int(1);
    return (sc_0, (v'amount_bigger, v'myBool));
}

((int, int, int, slice, int, (int), (int))) $Second$_constructor_amount_bigger_myBool_thisDoesNotFit_myAddress_myBool2_myStruct_myStruct2(int amount_bigger, int myBool, int thisDoesNotFit, slice myAddress, int myBool2, (int) myStruct, (int) myStruct2) inline {
    return (amount_bigger, myBool, thisDoesNotFit, myAddress, myBool2, myStruct, myStruct2);
}

;;
;; Type: Large
;; Header: 0x24dd4543
;; TLB: large#24dd4543 address:address value:coins = Large
;;

(slice, (tuple)) $Large$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 618480963);
    return (sc_0, null());
}

;;
;; Type: SmallBounce
;; Header: 0xc0dee6d6
;; TLB: small_bounce#c0dee6d6 amount:uint32 myBool3:bool = SmallBounce
;;

(slice, ((int, int))) $SmallBounce$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3235833558);
    var v'amount = sc_0~load_uint(32);
    var v'myBool3 = sc_0~load_int(1);
    return (sc_0, (v'amount, v'myBool3));
}

;;
;; Type: SampleContract
;;

builder $SampleContract$_store(builder build_0, (int) v) inline {
    var (v'a) = v;
    build_0 = build_0.store_int(v'a, 257);
    return build_0;
}

(slice, ((int))) $SampleContract$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    return (sc_0, (v'a));
}

(int) $SampleContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SampleContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SampleContract$_contract_init();
    }
}

() $SampleContract$_contract_store((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SampleContract$_store(b, v);
    set_data(b.end_cell());
}