;;
;; Type: Vars
;; TLB: _ a:int257 b:int257 c:int257 d:int257 e:int257 = Vars
;;

builder $Vars$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_int(v'b, 257);
    build_0 = build_0.store_int(v'c, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'd, 257);
    build_1 = build_1.store_int(v'e, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, int, int))) $Vars$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(257);
    var v'c = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'd = sc_1~load_int(257);
    var v'e = sc_1~load_int(257);
    return (sc_0, (v'a, v'b, v'c, v'd, v'e));
}

((int, int, int, int, int)) $Vars$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'a, int vvv'b, int vvv'c, int vvv'd, int vvv'e) = __tact_tuple_destroy_5(v);
    return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e);
}

tuple $Vars$_as_optional((int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    return __tact_tuple_create_5(v'a, v'b, v'c, v'd, v'e);
}

tuple $Vars$_to_tuple(((int, int, int, int, int)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    return __tact_tuple_create_5(v'a, v'b, v'c, v'd, v'e);
}

tuple $Vars$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Vars$_to_tuple($Vars$_not_null(v)); 
}

(int, int, int, int, int) $Vars$_from_tuple(tuple v) inline {
    var (int v'a, int v'b, int v'c, int v'd, int v'e) = __tact_tuple_destroy_5(v);
    return (v'a, v'b, v'c, v'd, v'e);
}

(int, int, int, int, int) $Vars$_to_external(((int, int, int, int, int)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v; 
    return (v'a, v'b, v'c, v'd, v'e);
}

tuple $Vars$_to_opt_external(tuple v) inline {
    var loaded = $Vars$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int, int, int)) $Vars$_constructor_a_b_c_d_e(int a, int b, int c, int d, int e) inline {
    return (a, b, c, d, e);
}

;;
;; Type: Both
;; TLB: _ a:Vars{a:int257,b:int257,c:int257,d:int257,e:int257} b:Vars{a:int257,b:int257,c:int257,d:int257,e:int257} = Both
;;

(((int, int, int, int, int), (int, int, int, int, int))) $Both$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'a'a, int vvv'a'b, int vvv'a'c, int vvv'a'd, int vvv'a'e, int vvv'b'a, int vvv'b'b, int vvv'b'c, int vvv'b'd, int vvv'b'e) = __tact_tuple_destroy_10(v);
    return ((vvv'a'a, vvv'a'b, vvv'a'c, vvv'a'd, vvv'a'e), (vvv'b'a, vvv'b'b, vvv'b'c, vvv'b'd, vvv'b'e));
}

tuple $Both$_as_optional(((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'a'a, v'a'b, v'a'c, v'a'd, v'a'e), (v'b'a, v'b'b, v'b'c, v'b'd, v'b'e)) = v;
    return __tact_tuple_create_10(v'a'a, v'a'b, v'a'c, v'a'd, v'a'e, v'b'a, v'b'b, v'b'c, v'b'd, v'b'e);
}

tuple $Both$_to_tuple((((int, int, int, int, int), (int, int, int, int, int))) v) inline {
    var (v'a, v'b) = v;
    return __tact_tuple_create_2($Vars$_to_tuple(v'a), $Vars$_to_tuple(v'b));
}

tuple $Both$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Both$_to_tuple($Both$_not_null(v)); 
}

((int, int, int, int, int), (int, int, int, int, int)) $Both$_from_tuple(tuple v) inline {
    var (tuple v'a, tuple v'b) = __tact_tuple_destroy_2(v);
    return ($Vars$_from_tuple(v'a), $Vars$_from_tuple(v'b));
}

tuple $Both$_from_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Both$_as_optional($Both$_from_tuple(v));
}

(tuple, tuple) $Both$_to_external((((int, int, int, int, int), (int, int, int, int, int))) v) inline {
    var (v'a, v'b) = v; 
    return ($Vars$_to_tuple(v'a), $Vars$_to_tuple(v'b));
}

tuple $Both$_to_opt_external(tuple v) inline {
    var loaded = $Both$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

(((int, int, int, int, int), (int, int, int, int, int))) $Both$_constructor_a_b((int, int, int, int, int) a, (int, int, int, int, int) b) inline {
    return (a, b);
}

;;
;; Type: Update
;; Header: 0xa2e2bea5
;; TLB: update#a2e2bea5 a:Vars{a:int257,b:int257,c:int257,d:int257,e:int257} b:Vars{a:int257,b:int257,c:int257,d:int257,e:int257} = Update
;;

(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $Update$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2732768933);
    var v'a = sc_0~$Vars$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'b = sc_1~$Vars$_load();
    return (sc_0, (v'a, v'b));
}

;;
;; Type: SerializationTester2
;;

builder $SerializationTester2$_store(builder build_0, ((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'a'a, v'a'b, v'a'c, v'a'd, v'a'e), (v'b'a, v'b'b, v'b'c, v'b'd, v'b'e)) = v;
    build_0 = $Vars$_store(build_0, (v'a'a, v'a'b, v'a'c, v'a'd, v'a'e));
    var build_1 = begin_cell();
    build_1 = $Vars$_store(build_1, (v'b'a, v'b'b, v'b'c, v'b'd, v'b'e));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $SerializationTester2$_load(slice sc_0) inline {
    var v'a = sc_0~$Vars$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'b = sc_1~$Vars$_load();
    return (sc_0, (v'a, v'b));
}

(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $SerializationTester2$init$_load(slice sc_0) inline {
    var v'a = sc_0~$Vars$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'b = sc_1~$Vars$_load();
    return (sc_0, (v'a, v'b));
}

((int, int, int, int, int), (int, int, int, int, int)) $SerializationTester2$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SerializationTester2$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        ((int, int, int, int, int) a, (int, int, int, int, int) b) = $sc~$SerializationTester2$init$_load();
        $sc.end_parse();
        return $SerializationTester2$_contract_init(a, b);
    }
}

() $SerializationTester2$_contract_store(((int, int, int, int, int), (int, int, int, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SerializationTester2$_store(b, v);
    set_data(b.end_cell());
}