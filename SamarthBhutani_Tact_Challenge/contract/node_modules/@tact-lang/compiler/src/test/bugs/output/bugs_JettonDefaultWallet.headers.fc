;;
;; Header files for JettonDefaultWallet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $TokenTransfer$_load
(slice, ((int, int, slice, slice, cell, int, slice))) $TokenTransfer$_load(slice sc_0) inline_ref;

;; $TokenTransferInternal$_store
builder $TokenTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $TokenTransferInternal$_store_cell
cell $TokenTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $TokenTransferInternal$_load
(slice, ((int, int, slice, slice, int, slice))) $TokenTransferInternal$_load(slice sc_0) inline_ref;

;; $TokenNotification$_store
builder $TokenNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $TokenNotification$_store_cell
cell $TokenNotification$_store_cell((int, int, slice, slice) v) inline;

;; $TokenBurn$_load
(slice, ((int, int, slice, slice))) $TokenBurn$_load(slice sc_0) inline;

;; $TokenBurnNotification$_store
builder $TokenBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $TokenBurnNotification$_store_cell
cell $TokenBurnNotification$_store_cell((int, int, slice, slice) v) inline;

;; $TokenExcesses$_store
builder $TokenExcesses$_store(builder build_0, (int) v) inline;

;; $TokenExcesses$_store_cell
cell $TokenExcesses$_store_cell((int) v) inline;

;; $JettonDefaultWallet$_store
builder $JettonDefaultWallet$_store(builder build_0, (int, slice, slice) v) inline;

;; $JettonDefaultWallet$_load
(slice, ((int, slice, slice))) $JettonDefaultWallet$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $JettonWalletData$_to_external
(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline;

;; $JettonDefaultWallet$init$_store
builder $JettonDefaultWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $JettonDefaultWallet$init$_load
(slice, ((slice, slice))) $JettonDefaultWallet$init$_load(slice sc_0) inline;

;; $JettonDefaultWallet$_contract_init
(int, slice, slice) $JettonDefaultWallet$_contract_init(slice $master, slice $owner) impure inline_ref;

;; $JettonDefaultWallet$_contract_load
(int, slice, slice) $JettonDefaultWallet$_contract_load() impure inline_ref;

;; $JettonDefaultWallet$_contract_store
() $JettonDefaultWallet$_contract_store((int, slice, slice) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $TokenTransferInternal$_constructor_queryId_amount_from_response_destination_forward_ton_amount_forward_payload
((int, int, slice, slice, int, slice)) $TokenTransferInternal$_constructor_queryId_amount_from_response_destination_forward_ton_amount_forward_payload(int queryId, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline;

;; $JettonDefaultWallet$_init_child
(cell, cell) $JettonDefaultWallet$_init_child(cell sys', slice $master, slice $owner) inline_ref;

;; $JettonDefaultWallet$_fun_msgValue
((int, slice, slice), int) $JettonDefaultWallet$_fun_msgValue((int, slice, slice) $self, int $value) impure inline_ref;

;; $JettonWalletData$_constructor_balance_owner_master_walletCode
((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_master_walletCode(int balance, slice owner, slice master, cell walletCode) inline;

;; $JettonDefaultWallet$_fun_get_wallet_data
((int, slice, slice), (int, slice, slice, cell)) $JettonDefaultWallet$_fun_get_wallet_data((int, slice, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline;

;; $SendParameters$_constructor_to_value_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body(slice to, int value, int bounce, cell body) inline;

;; $TokenNotification$_constructor_queryId_amount_from_forward_payload
((int, int, slice, slice)) $TokenNotification$_constructor_queryId_amount_from_forward_payload(int queryId, int amount, slice from, slice forward_payload) inline;

;; $SendParameters$_constructor_to_value_bounce_body_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body_mode(slice to, int value, int bounce, cell body, int mode) inline;

;; $TokenExcesses$_constructor_queryId
((int)) $TokenExcesses$_constructor_queryId(int queryId) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $TokenBurnNotification$_constructor_queryId_amount_owner_response_destination
((int, int, slice, slice)) $TokenBurnNotification$_constructor_queryId_amount_owner_response_destination(int queryId, int amount, slice owner, slice response_destination) inline;
