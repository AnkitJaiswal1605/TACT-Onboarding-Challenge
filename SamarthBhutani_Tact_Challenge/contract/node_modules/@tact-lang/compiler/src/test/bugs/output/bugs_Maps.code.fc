#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "bugs_Maps.headers.fc";
#include "bugs_Maps.stdlib.fc";
#include "bugs_Maps.constants.fc";
#include "bugs_Maps.storage.fc";

;;
;; Contract Maps functions
;;

(cell, cell, cell, cell, cell, cell, cell, cell) $Maps$_contract_init(cell $arg) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = (null(), null(), null(), null(), null(), null(), null(), null());
    $self'mi2 = $arg;
    return ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4);
}

((cell, cell, cell, cell, cell, cell, cell, cell), slice) $Maps$_fun_oneItem((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), __tact_dict_get_int_slice($self'mi4, 257, $key));
}

((cell, cell, cell, cell, cell, cell, cell, cell), slice) $Maps$_fun_itemCheck((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    if (null?($TokenInfo$_load_opt(__tact_dict_get_int_cell($self'mi1, 257, 17)))) {
        return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), __gen_slice_string_ef17d523607831d9b150cef9b36c6e32272887eac302eefcd2ca22fed29f4e21());
    }
    var ($item'ticker, $item'decimals) = $TokenInfo$_not_null($TokenInfo$_load_opt(__tact_dict_get_int_cell($self'mi1, 257, 17)));
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), $item'ticker);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $Maps$_fun_allItems((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), $self'ma1);
}

;;
;; Receivers of a Contract Maps
;;

((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_internal_text_2db851a56a7d13c238a59783d8ff80cf1858df1504309cbd940f1daa4f32dec5((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline {
    var ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4) = $self;
    $self'mi1~__tact_dict_set_int_cell(257, 17, $TokenInfo$_store_cell($TokenInfo$_constructor_ticker_decimals(__gen_slice_string_974f8ddbc705ede61e61b42cacf124a05423b9c40120e70d786f3889001bd327(), 9)));
    $self'mi2~__tact_dict_set_int_int(257, 41507952295811122, true, 1);
    $self'mi3~__tact_dict_set_int_int(257, 1766847064778384329583297500742918515827483896875618958121606201292619776, 1725436586697640946858688965569256363112777243042596638790631055949824, 257);
    $self'mi4~__tact_dict_set_int_slice(257, (- 900), __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc());
    $self'ma1~__tact_dict_set_slice_cell(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), $TokenInfo$_store_cell($TokenInfo$_constructor_ticker_decimals(__gen_slice_string_78fea0ad55f744389997adb1b2c7823104a9b1ad6443ff331d83f89f506d2239(), 18)));
    $self'ma2~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), true, 1);
    $self'ma3~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), 1230000000, 257);
    $self'ma4~__tact_dict_set_slice_slice(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), my_address());
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_internal_text_cb12f2784b4b1117ff896a549c344705dda2007d8c283d970bc6ecf3a62f4651((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline {
    var ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4) = $self;
    $self'mi1~__tact_dict_set_int_cell(257, 17, $TokenInfo$_store_opt(null()));
    $self'mi2~__tact_dict_set_int_int(257, 41507952295811122, null(), 1);
    $self'mi3~__tact_dict_set_int_int(257, 1766847064778384329583297500742918515827483896875618958121606201292619776, null(), 257);
    $self'mi4~__tact_dict_set_int_slice(257, (- 900), null());
    $self'ma1~__tact_dict_set_slice_cell(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), $TokenInfo$_store_opt(null()));
    $self'ma2~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null(), 1);
    $self'ma3~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null(), 257);
    $self'ma4~__tact_dict_set_slice_slice(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null());
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_internal_text_0c1cd7659460b0f81b94237cd5ffc13a4fb58ea689b2815de74dd3770646a4ea((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline {
    var ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4) = $self;
    $self'mi1 = null();
    $self'mi2 = null();
    $self'mi3 = null();
    $self'mi4 = null();
    $self'ma1 = null();
    $self'ma2 = null();
    $self'ma3 = null();
    $self'ma4 = null();
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

(((cell, cell, cell, cell, cell, cell, cell, cell)), ()) $Maps$_internal_binary_Replace((cell, cell, cell, cell, cell, cell, cell, cell) $self, (cell) $msg) impure inline {
    var ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4) = $self;
    var ($msg'items) = $msg;
    $self'mi4 = $msg'items;
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

(((cell, cell, cell, cell, cell, cell, cell, cell)), ()) $Maps$_internal_binary_Deploy((cell, cell, cell, cell, cell, cell, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)~$Maps$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

;;
;; Get methods of a Contract Maps
;;

_ %oneItem(int $$key) method_id(68660) {
    int $key = $$key;
    var self = $Maps$_contract_load();
    var res = self~$Maps$_fun_oneItem($key);
    return res;
}

_ %itemCheck() method_id(102138) {
    var self = $Maps$_contract_load();
    var res = self~$Maps$_fun_itemCheck();
    return res;
}

_ %allItems() method_id(68968) {
    var self = $Maps$_contract_load();
    var res = self~$Maps$_fun_allItems();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmXQ8zqXfntaCb4rAvbcHfKMmYmRpFSFxDg37mhzMUskQF";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Maps
;;

((cell, cell, cell, cell, cell, cell, cell, cell), int) $Maps$_contract_router_internal((cell, cell, cell, cell, cell, cell, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Replace message
    if (op == 1384510466) {
        var msg = in_msg~$Replace$_load();
        self~$Maps$_internal_binary_Replace(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Maps$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "set keys" message
        if (text_op == 0x2db851a56a7d13c238a59783d8ff80cf1858df1504309cbd940f1daa4f32dec5) {
            self~$Maps$_internal_text_2db851a56a7d13c238a59783d8ff80cf1858df1504309cbd940f1daa4f32dec5();
            return (self, true);
        }
        
        ;; Receive "delete keys" message
        if (text_op == 0xcb12f2784b4b1117ff896a549c344705dda2007d8c283d970bc6ecf3a62f4651) {
            self~$Maps$_internal_text_cb12f2784b4b1117ff896a549c344705dda2007d8c283d970bc6ecf3a62f4651();
            return (self, true);
        }
        
        ;; Receive "clear" message
        if (text_op == 0x0c1cd7659460b0f81b94237cd5ffc13a4fb58ea689b2815de74dd3770646a4ea) {
            self~$Maps$_internal_text_0c1cd7659460b0f81b94237cd5ffc13a4fb58ea689b2815de74dd3770646a4ea();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Maps$_contract_load();
    
    ;; Handle operation
    int handled = self~$Maps$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Maps$_contract_store(self);
}
