import { Interval as RawInterval, Node as RawNode } from 'ohm-js';
import { TypeOrigin } from '@tact-lang/compiler/dist/types/types';
export declare class ASTRef {
    #private;
    static merge(...refs: ASTRef[]): ASTRef;
    constructor(interval: RawInterval, file: string | null);
    get file(): string | null;
    get contents(): string;
    get interval(): RawInterval;
}
export type ASTPrimitive = {
    kind: 'primitive';
    origin: TypeOrigin;
    id: number;
    name: string;
    ref: ASTRef;
};
export type ASTNumber = {
    kind: 'number';
    id: number;
    value: bigint;
    ref: ASTRef;
};
export type ASTID = {
    kind: 'id';
    id: number;
    value: string;
    ref: ASTRef;
};
export type ASTBoolean = {
    kind: 'boolean';
    id: number;
    value: boolean;
    ref: ASTRef;
};
export type ASTString = {
    kind: 'string';
    id: number;
    value: string;
    ref: ASTRef;
};
export type ASTNull = {
    kind: 'null';
    id: number;
    ref: ASTRef;
};
export type ASTLvalueRef = {
    kind: 'lvalue_ref';
    id: number;
    name: string;
    ref: ASTRef;
};
export type ASTTypeRefSimple = {
    kind: 'type_ref_simple';
    id: number;
    name: string;
    optional: boolean;
    ref: ASTRef;
};
export type ASTTypeRefMap = {
    kind: 'type_ref_map';
    id: number;
    key: string;
    keyAs: string | null;
    value: string;
    valueAs: string | null;
    ref: ASTRef;
};
export type ASTTypeRefBounced = {
    kind: 'type_ref_bounced';
    id: number;
    name: string;
    ref: ASTRef;
};
export type ASTTypeRef = ASTTypeRefSimple | ASTTypeRefMap | ASTTypeRefBounced;
export type ASTOpBinary = {
    kind: 'op_binary';
    id: number;
    op: '+' | '-' | '*' | '/' | '!=' | '>' | '<' | '>=' | '<=' | '==' | '&&' | '||' | '%' | '<<' | '>>' | '&' | '|';
    left: ASTExpression;
    right: ASTExpression;
    ref: ASTRef;
};
export type ASTOpUnary = {
    kind: 'op_unary';
    id: number;
    op: '+' | '-' | '!' | '!!';
    right: ASTExpression;
    ref: ASTRef;
};
export type ASTOpField = {
    kind: 'op_field';
    id: number;
    src: ASTExpression;
    name: string;
    ref: ASTRef;
};
export type ASTOpCall = {
    kind: 'op_call';
    id: number;
    src: ASTExpression;
    name: string;
    args: ASTExpression[];
    ref: ASTRef;
};
export type ASTOpCallStatic = {
    kind: 'op_static_call';
    id: number;
    name: string;
    args: ASTExpression[];
    ref: ASTRef;
};
export type ASTOpNew = {
    kind: 'op_new';
    id: number;
    type: string;
    args: ASTNewParameter[];
    ref: ASTRef;
};
export type ASTNewParameter = {
    kind: 'new_parameter';
    id: number;
    name: string;
    exp: ASTExpression;
    ref: ASTRef;
};
export type ASTInitOf = {
    kind: 'init_of';
    id: number;
    name: string;
    args: ASTExpression[];
    ref: ASTRef;
};
export type ASTProgram = {
    kind: 'program';
    id: number;
    entries: (ASTStruct | ASTContract | ASTPrimitive | ASTFunction | ASTNativeFunction | ASTTrait | ASTProgramImport | ASTConstant)[];
};
export type ASTProgramImport = {
    kind: 'program_import';
    id: number;
    path: ASTString;
    ref: ASTRef;
};
export type ASTStruct = {
    kind: 'def_struct';
    origin: TypeOrigin;
    id: number;
    name: string;
    message: boolean;
    prefix: number | null;
    fields: ASTField[];
    ref: ASTRef;
};
export type ASTTrait = {
    kind: 'def_trait';
    origin: TypeOrigin;
    id: number;
    name: string;
    traits: ASTString[];
    attributes: ASTContractAttribute[];
    declarations: (ASTField | ASTFunction | ASTReceive | ASTConstant)[];
    ref: ASTRef;
};
export type ASTField = {
    kind: 'def_field';
    id: number;
    name: string;
    type: ASTTypeRef;
    init: ASTExpression | null;
    as: string | null;
    ref: ASTRef;
};
export type ASTConstant = {
    kind: 'def_constant';
    id: number;
    name: string;
    type: ASTTypeRef;
    value: ASTExpression | null;
    attributes: ASTConstantAttribute[];
    ref: ASTRef;
};
export type ASTConstantAttribute = {
    type: 'virtual';
    ref: ASTRef;
} | {
    type: 'overrides';
    ref: ASTRef;
} | {
    type: 'abstract';
    ref: ASTRef;
};
export type ASTContractAttribute = {
    type: 'interface';
    name: ASTString;
    ref: ASTRef;
};
export type ASTContract = {
    kind: 'def_contract';
    origin: TypeOrigin;
    id: number;
    name: string;
    traits: ASTString[];
    attributes: ASTContractAttribute[];
    declarations: (ASTField | ASTFunction | ASTInitFunction | ASTReceive | ASTConstant)[];
    ref: ASTRef;
};
export type ASTArgument = {
    kind: 'def_argument';
    id: number;
    name: string;
    type: ASTTypeRef;
    ref: ASTRef;
};
export type ASTFunctionAttribute = {
    type: 'get';
    ref: ASTRef;
} | {
    type: 'mutates';
    ref: ASTRef;
} | {
    type: 'extends';
    ref: ASTRef;
} | {
    type: 'virtual';
    ref: ASTRef;
} | {
    type: 'abstract';
    ref: ASTRef;
} | {
    type: 'overrides';
    ref: ASTRef;
} | {
    type: 'inline';
    ref: ASTRef;
};
export type ASTFunction = {
    kind: 'def_function';
    origin: TypeOrigin;
    id: number;
    attributes: ASTFunctionAttribute[];
    name: string;
    return: ASTTypeRef | null;
    args: ASTArgument[];
    statements: ASTStatement[] | null;
    ref: ASTRef;
};
export type ASTReceive = {
    kind: 'def_receive';
    id: number;
    selector: {
        kind: 'internal-simple';
        arg: ASTArgument;
    } | {
        kind: 'internal-fallback';
    } | {
        kind: 'internal-comment';
        comment: ASTString;
    } | {
        kind: 'bounce';
        arg: ASTArgument;
    } | {
        kind: 'external-simple';
        arg: ASTArgument;
    } | {
        kind: 'external-fallback';
    } | {
        kind: 'external-comment';
        comment: ASTString;
    };
    statements: ASTStatement[];
    ref: ASTRef;
};
export type ASTNativeFunction = {
    kind: 'def_native_function';
    origin: TypeOrigin;
    id: number;
    attributes: ASTFunctionAttribute[];
    name: string;
    nativeName: string;
    return: ASTTypeRef | null;
    args: ASTArgument[];
    ref: ASTRef;
};
export type ASTInitFunction = {
    kind: 'def_init_function';
    id: number;
    args: ASTArgument[];
    statements: ASTStatement[];
    ref: ASTRef;
};
export type ASTStatementLet = {
    kind: 'statement_let';
    id: number;
    name: string;
    type: ASTTypeRef;
    expression: ASTExpression;
    ref: ASTRef;
};
export type ASTStatementReturn = {
    kind: 'statement_return';
    id: number;
    expression: ASTExpression | null;
    ref: ASTRef;
};
export type ASTStatementExpression = {
    kind: 'statement_expression';
    id: number;
    expression: ASTExpression;
    ref: ASTRef;
};
export type ASTSTatementAssign = {
    kind: 'statement_assign';
    id: number;
    path: ASTLvalueRef[];
    expression: ASTExpression;
    ref: ASTRef;
};
export type ASTCondition = {
    kind: 'statement_condition';
    id: number;
    expression: ASTExpression;
    trueStatements: ASTStatement[];
    falseStatements: ASTStatement[] | null;
    elseif: ASTCondition | null;
    ref: ASTRef;
};
export type ASTStatementWhile = {
    kind: 'statement_while';
    id: number;
    condition: ASTExpression;
    statements: ASTStatement[];
    ref: ASTRef;
};
export type ASTStatementUntil = {
    kind: 'statement_until';
    id: number;
    condition: ASTExpression;
    statements: ASTStatement[];
    ref: ASTRef;
};
export type ASTStatementRepeat = {
    kind: 'statement_repeat';
    id: number;
    condition: ASTExpression;
    statements: ASTStatement[];
    ref: ASTRef;
};
export type ASTStatement = ASTStatementLet | ASTStatementReturn | ASTStatementExpression | ASTSTatementAssign | ASTCondition | ASTStatementWhile | ASTStatementUntil | ASTStatementRepeat;
export type ASTExpression = ASTOpBinary | ASTOpUnary | ASTOpField | ASTNumber | ASTID | ASTBoolean | ASTOpCall | ASTOpCallStatic | ASTOpNew | ASTNull | ASTLvalueRef | ASTInitOf | ASTString;
export type ASTNode = ASTExpression | ASTProgram | ASTStruct | ASTField | ASTContract | ASTArgument | ASTFunction | ASTOpCall | ASTStatementLet | ASTStatementReturn | ASTProgram | ASTPrimitive | ASTOpCallStatic | ASTStatementExpression | ASTNativeFunction | ASTSTatementAssign | ASTOpNew | ASTNewParameter | ASTTypeRef | ASTNull | ASTCondition | ASTInitFunction | ASTStatementWhile | ASTStatementUntil | ASTStatementRepeat | ASTReceive | ASTLvalueRef | ASTString | ASTTrait | ASTProgramImport | ASTFunction | ASTNativeFunction | ASTInitOf | ASTString | ASTConstant;
export type ASTType = ASTPrimitive | ASTStruct | ASTContract | ASTTrait;
type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;
export declare function createNode(src: DistributiveOmit<ASTNode, 'id'>): ASTNode;
export declare function cloneASTNode<T extends ASTNode>(src: T): T;
export declare function __DANGER_resetNodeId(): void;
export declare function inFile<T>(path: string, callback: () => T): T;
export declare function createRef(s: RawNode, ...extra: RawNode[]): ASTRef;
export declare function throwError(message: string, ref: ASTRef): never;
export declare function traverse(node: ASTNode, callback: (node: ASTNode) => void): void;
export { };
