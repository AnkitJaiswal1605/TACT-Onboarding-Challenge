"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadOpcode = void 0;
const opcodes_1 = require("./opcodes");
const codepage = opcodes_1.CP0Auto;
function loadOpcode(slice, cell) {
    let opCode = '';
    while (slice.remainingBits > 0) {
        // Load next bit
        let opCodePart = slice.loadBit();
        opCode += opCodePart ? '1' : '0';
        // Find opcode in codepage
        // Edit maxOccurencies for debugging purposes
        let matches = codepage.find(opCode, 2);
        if (matches.length > 1) {
            continue;
        }
        if (matches.length == 1 && opCode.length !== matches[0].length) {
            continue;
        }
        if (matches.length == 0) {
            return { ok: false, read: opCode };
        }
        // Load opcode
        let op = codepage.getOp(opCode);
        // Resolve real opcode
        let resolvedOpcode;
        if (typeof op === 'function') {
            resolvedOpcode = op(slice, cell);
        }
        else {
            resolvedOpcode = op;
        }
        return { ok: true, read: resolvedOpcode };
    }
    return { ok: false, read: opCode };
}
exports.loadOpcode = loadOpcode;
