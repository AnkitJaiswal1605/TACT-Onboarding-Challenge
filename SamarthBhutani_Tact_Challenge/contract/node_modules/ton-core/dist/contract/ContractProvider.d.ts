/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Cell } from "ton-core/dist/boc/Cell";
import { SendMode } from "ton-core/dist/types/SendMode";
import { TupleReader } from "ton-core/dist/tuple/reader";
import { TupleItem } from "ton-core/dist/tuple/tuple";
import { Maybe } from "ton-core/dist/utils/maybe";
import { ContractState } from "ton-core/dist/contract/ContractState";
import { Sender } from 'ton-core/dist/contract/Sender';
export type ContractGetMethodResult = {
    stack: TupleReader;
    gasUsed?: Maybe<bigint>;
    logs?: Maybe<string>;
};
export interface ContractProvider {
    getState(): Promise<ContractState>;
    get(name: string, args: TupleItem[]): Promise<ContractGetMethodResult>;
    external(message: Cell): Promise<void>;
    internal(via: Sender, args: {
        value: bigint | string;
        bounce?: Maybe<boolean>;
        sendMode?: SendMode;
        body?: Maybe<Cell | string>;
    }): Promise<void>;
}
