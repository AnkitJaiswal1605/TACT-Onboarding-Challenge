"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AsyncLock_waiters;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncLock = void 0;
function createWaiter() {
    const w = { promise: undefined, resolve: undefined };
    w.promise = new Promise((res) => {
        w.resolve = res;
    });
    return w;
}
class AsyncLock {
    constructor() {
        _AsyncLock_waiters.set(this, []);
    }
    async acquire() {
        const waiters = __classPrivateFieldGet(this, _AsyncLock_waiters, "f").map(w => w.promise);
        __classPrivateFieldGet(this, _AsyncLock_waiters, "f").push(createWaiter());
        if (waiters.length > 0) {
            await Promise.all(waiters);
        }
    }
    async release() {
        const waiter = __classPrivateFieldGet(this, _AsyncLock_waiters, "f").shift();
        if (waiter !== undefined) {
            waiter.resolve();
        }
        else {
            throw new Error('The lock is not locked');
        }
    }
    async with(fn) {
        await this.acquire();
        try {
            return await fn();
        }
        finally {
            await this.release();
        }
    }
}
exports.AsyncLock = AsyncLock;
_AsyncLock_waiters = new WeakMap();
