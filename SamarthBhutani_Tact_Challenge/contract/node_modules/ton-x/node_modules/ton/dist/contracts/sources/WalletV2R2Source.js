"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletV2R2Source = void 0;
const __1 = require("../..");
class WalletV2R2Source {
    constructor(opts) {
        this.type = 'org.ton.wallets.v2.r2';
        this.walletVersion = 'v2';
        this.backup = () => {
            const store = new __1.ConfigStore();
            store.setInt('wc', this.workchain);
            store.setBuffer('pk', this.publicKey);
            return store.save();
        };
        this.describe = () => {
            return 'Wallet V2 Contract (R2)';
        };
        this.publicKey = opts.publicKey;
        this.workchain = opts.workchain;
        this.initialCode = opts.initialCode;
        this.initialData = opts.initialData;
        Object.freeze(this);
    }
    static create(opts) {
        // Resolve parameters
        let publicKey = opts.publicKey;
        let workchain = opts.workchain;
        // Build initial code and data
        let initialCode = __1.Cell.fromBoc('B5EE9C724101010100630000C2FF0020DD2082014C97BA218201339CBAB19C71B0ED44D0D31FD70BFFE304E0A4F2608308D71820D31FD31F01F823BBF263ED44D0D31FD3FFD15131BAF2A103F901541042F910F2A2F800029320D74A96D307D402FB00E8D1A4C8CB1FCBFFC9ED54044CD7A1')[0];
        let initialData = new __1.Cell();
        initialData.bits.writeUint(0, 32); // SeqNo
        initialData.bits.writeBuffer(publicKey); // Public key
        return new WalletV2R2Source({ publicKey, initialCode, initialData, workchain });
    }
    static restore(backup) {
        const store = new __1.ConfigStore(backup);
        return WalletV2R2Source.create({ publicKey: store.getBuffer('pk'), workchain: store.getInt('wc') });
    }
}
exports.WalletV2R2Source = WalletV2R2Source;
