/// <reference types="node" />
import { Maybe } from '../types';
import { BitString } from './BitString';
import inspectSymbol from 'symbol.inspect';
import { Slice } from '..';
export declare class Cell {
    static fromBoc(src: Buffer | string): Cell[];
    readonly bits: BitString;
    readonly refs: Cell[];
    readonly isExotic: boolean;
    constructor(isExotic?: boolean, bits?: BitString);
    beginParse(): Slice;
    writeCell(anotherCell: Cell): void;
    hash(): Buffer;
    toBoc(opts?: {
        idx?: Maybe<boolean>;
        crc32?: Maybe<boolean>;
        cacheBits?: Maybe<boolean>;
        flags?: Maybe<number>;
    }): Buffer;
    [inspectSymbol]: () => string;
    toString(indent?: string): string;
    withReference(cell: Cell): this;
    withData(src: string): this;
    equals(src: Cell): boolean;
}
