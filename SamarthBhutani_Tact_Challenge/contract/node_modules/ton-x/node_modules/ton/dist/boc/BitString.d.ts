/// <reference types="node" />
import BN from 'bn.js';
import { Address } from '../address/Address';
import inspectSymbol from 'symbol.inspect';
export declare class BitString implements Iterable<boolean> {
    #private;
    static alloc(length: number): BitString;
    private constructor();
    get available(): number;
    get length(): number;
    get cursor(): number;
    get buffer(): Buffer;
    [Symbol.iterator]: () => Iterator<boolean>;
    get: (n: number) => boolean;
    on: (n: number) => void;
    off: (n: number) => void;
    toggle: (n: number) => void;
    writeBit: (value: boolean | number) => void;
    writeBitArray(value: (boolean | number)[]): void;
    writeUint: (value: number | BN, bitLength: number) => void;
    writeInt: (value: number | BN, bitLength: number) => void;
    writeUint8: (value: number) => void;
    writeBuffer: (buffer: Buffer) => void;
    writeCoins: (amount: number | BN) => void;
    writeAddress: (address: Address | null) => void;
    writeBitString: (value: BitString) => void;
    clone(): BitString;
    toString(): string;
    [inspectSymbol]: () => string;
    toFiftHex(): string;
    setTopUppedArray(array: Buffer, fullfilledBytes?: boolean): void;
    getTopUppedArray(): Buffer;
    equals(src: BitString): boolean;
}
