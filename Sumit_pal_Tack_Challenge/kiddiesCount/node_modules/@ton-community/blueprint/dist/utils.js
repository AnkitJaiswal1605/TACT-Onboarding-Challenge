"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExplorerLink = exports.selectFile = exports.selectOption = exports.findScripts = exports.findCompiles = exports.oneOrZeroOf = exports.sleep = exports.tonDeepLink = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const paths_1 = require("./paths");
const tonDeepLink = (address, amount, body, stateInit) => `ton://transfer/${address.toString({
    urlSafe: true,
    bounceable: true,
})}?amount=${amount.toString()}${body ? '&bin=' + body.toBoc().toString('base64url') : ''}${stateInit ? '&init=' + stateInit.toBoc().toString('base64url') : ''}`;
exports.tonDeepLink = tonDeepLink;
function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
exports.sleep = sleep;
function oneOrZeroOf(options) {
    let opt = undefined;
    for (const k in options) {
        if (options[k]) {
            if (opt === undefined) {
                opt = k;
            }
            else {
                throw new Error(`Please pick only one of the options: ${Object.keys(options).join(', ')}`);
            }
        }
    }
    return opt;
}
exports.oneOrZeroOf = oneOrZeroOf;
const compileEnd = '.compile.ts';
const findCompiles = async () => (await promises_1.default.readdir(paths_1.WRAPPERS_DIR))
    .filter((f) => f.endsWith(compileEnd))
    .map((f) => ({ path: path_1.default.join(paths_1.WRAPPERS_DIR, f), name: f.slice(0, f.length - compileEnd.length) }));
exports.findCompiles = findCompiles;
const findScripts = async () => (await promises_1.default.readdir(paths_1.SCRIPTS_DIR))
    .filter((f) => f.endsWith('.ts'))
    .map((f) => ({ path: path_1.default.join(paths_1.SCRIPTS_DIR, f), name: path_1.default.parse(f).name }));
exports.findScripts = findScripts;
async function selectOption(options, opts) {
    if (opts.hint) {
        const found = options.find((o) => o.value === opts.hint);
        if (found === undefined) {
            throw new Error(`Could not find option '${opts.hint}'`);
        }
        return found;
    }
    else {
        return await opts.ui.choose(opts.msg, options, (o) => o.name);
    }
}
exports.selectOption = selectOption;
async function selectFile(files, opts) {
    let selected;
    if (opts.hint) {
        const found = files.find((f) => f.name.toLowerCase() === opts.hint?.toLowerCase());
        if (found === undefined) {
            throw new Error(`Could not find file with name '${opts.hint}'`);
        }
        selected = found;
        opts.ui.write(`Using file: ${selected.name}`);
    }
    else {
        if (files.length === 1) {
            selected = files[0];
            opts.ui.write(`Using file: ${selected.name}`);
        }
        else {
            selected = await opts.ui.choose('Choose file to use', files, (f) => f.name);
        }
    }
    return {
        ...selected,
        module: opts.import !== false ? await (_a = selected.path, Promise.resolve().then(() => __importStar(require(_a)))) : undefined,
    };
}
exports.selectFile = selectFile;
function getExplorerLink(address, network, explorer) {
    const networkPrefix = network === 'testnet' ? 'testnet.' : '';
    switch (explorer) {
        case 'tonscan':
            return `https://${networkPrefix}tonscan.org/address/${address}`;
        case 'tonapi':
            return `https://${networkPrefix}tonapi.io/account/${address}`;
        case 'toncx':
            return `https://${networkPrefix}ton.cx/address/${address}`;
        case 'dton':
            return `https://${networkPrefix}dton.io/a/${address}`;
        default:
            return `https://${networkPrefix}tonscan.org/address/${address}`;
    }
}
exports.getExplorerLink = getExplorerLink;
