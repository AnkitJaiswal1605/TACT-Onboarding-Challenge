"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _FSStorage_instances, _FSStorage_path, _FSStorage_readObject, _FSStorage_writeObject;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FSStorage = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
class FSStorage {
    constructor(path) {
        _FSStorage_instances.add(this);
        _FSStorage_path.set(this, void 0);
        __classPrivateFieldSet(this, _FSStorage_path, path, "f");
    }
    async setItem(key, value) {
        const obj = await __classPrivateFieldGet(this, _FSStorage_instances, "m", _FSStorage_readObject).call(this);
        obj[key] = value;
        await __classPrivateFieldGet(this, _FSStorage_instances, "m", _FSStorage_writeObject).call(this, obj);
    }
    async getItem(key) {
        const obj = await __classPrivateFieldGet(this, _FSStorage_instances, "m", _FSStorage_readObject).call(this);
        return obj[key] ?? null;
    }
    async removeItem(key) {
        const obj = await __classPrivateFieldGet(this, _FSStorage_instances, "m", _FSStorage_readObject).call(this);
        delete obj[key];
        await __classPrivateFieldGet(this, _FSStorage_instances, "m", _FSStorage_writeObject).call(this, obj);
    }
}
exports.FSStorage = FSStorage;
_FSStorage_path = new WeakMap(), _FSStorage_instances = new WeakSet(), _FSStorage_readObject = async function _FSStorage_readObject() {
    try {
        return JSON.parse((await promises_1.default.readFile(__classPrivateFieldGet(this, _FSStorage_path, "f"))).toString('utf-8'));
    }
    catch (e) {
        return {};
    }
}, _FSStorage_writeObject = async function _FSStorage_writeObject(obj) {
    await promises_1.default.mkdir(path_1.default.dirname(__classPrivateFieldGet(this, _FSStorage_path, "f")), { recursive: true });
    await promises_1.default.writeFile(__classPrivateFieldGet(this, _FSStorage_path, "f"), JSON.stringify(obj));
};
