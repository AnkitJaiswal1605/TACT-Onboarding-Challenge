"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TonConnectStorage_inner, _TonConnectProvider_connector, _TonConnectProvider_ui;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonConnectProvider = void 0;
const qrcode_terminal_1 = __importDefault(require("qrcode-terminal"));
const sdk_1 = __importDefault(require("@tonconnect/sdk"));
const ton_core_1 = require("ton-core");
class TonConnectStorage {
    constructor(inner) {
        _TonConnectStorage_inner.set(this, void 0);
        __classPrivateFieldSet(this, _TonConnectStorage_inner, inner, "f");
    }
    async setItem(key, value) {
        return await __classPrivateFieldGet(this, _TonConnectStorage_inner, "f").setItem(key, value);
    }
    async getItem(key) {
        return await __classPrivateFieldGet(this, _TonConnectStorage_inner, "f").getItem(key);
    }
    async removeItem(key) {
        return await __classPrivateFieldGet(this, _TonConnectStorage_inner, "f").removeItem(key);
    }
}
_TonConnectStorage_inner = new WeakMap();
function isRemote(walletInfo) {
    return 'universalLink' in walletInfo && 'bridgeUrl' in walletInfo;
}
class TonConnectProvider {
    constructor(storage, ui) {
        _TonConnectProvider_connector.set(this, void 0);
        _TonConnectProvider_ui.set(this, void 0);
        __classPrivateFieldSet(this, _TonConnectProvider_connector, new sdk_1.default({
            storage: new TonConnectStorage(storage),
            manifestUrl: 'https://raw.githubusercontent.com/ton-defi-org/tonconnect-manifest-temp/main/tonconnect-manifest.json',
        }), "f");
        __classPrivateFieldSet(this, _TonConnectProvider_ui, ui, "f");
    }
    async connect() {
        await this.connectWallet();
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").write(`Connected to wallet at address: ${ton_core_1.Address.parse(__classPrivateFieldGet(this, _TonConnectProvider_connector, "f").wallet.account.address).toString()}\n`);
    }
    address() {
        if (!__classPrivateFieldGet(this, _TonConnectProvider_connector, "f").wallet)
            return undefined;
        return ton_core_1.Address.parse(__classPrivateFieldGet(this, _TonConnectProvider_connector, "f").wallet.account.address);
    }
    async connectWallet() {
        const wallets = (await __classPrivateFieldGet(this, _TonConnectProvider_connector, "f").getWallets()).filter(isRemote);
        await __classPrivateFieldGet(this, _TonConnectProvider_connector, "f").restoreConnection();
        if (__classPrivateFieldGet(this, _TonConnectProvider_connector, "f").wallet) {
            return;
        }
        const wallet = await __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").choose('Choose your wallet', wallets, (w) => w.name);
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").setActionPrompt('Connecting to wallet...');
        const url = __classPrivateFieldGet(this, _TonConnectProvider_connector, "f").connect({
            universalLink: wallet.universalLink,
            bridgeUrl: wallet.bridgeUrl,
        });
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").write('\n');
        qrcode_terminal_1.default.generate(url, { small: true }, (qr) => __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").write(qr));
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").write('\n' + url + '\n\n');
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").setActionPrompt('Scan the QR code in your wallet or open the link...');
        return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _TonConnectProvider_connector, "f").onStatusChange((w) => {
                if (w) {
                    resolve();
                }
                else {
                    reject('Wallet is not connected');
                }
            }, reject);
        });
    }
    async sendTransaction(address, amount, payload, stateInit) {
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").setActionPrompt('Sending transaction. Approve in your wallet...');
        const result = await __classPrivateFieldGet(this, _TonConnectProvider_connector, "f").sendTransaction({
            validUntil: Date.now() + 5 * 60 * 1000,
            messages: [
                {
                    address: address.toString(),
                    amount: amount.toString(),
                    payload: payload?.toBoc().toString('base64'),
                    stateInit: stateInit
                        ? (0, ton_core_1.beginCell)().storeWritable((0, ton_core_1.storeStateInit)(stateInit)).endCell().toBoc().toString('base64')
                        : undefined,
                },
            ],
        });
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").clearActionPrompt();
        __classPrivateFieldGet(this, _TonConnectProvider_ui, "f").write('Sent transaction');
        return result;
    }
}
exports.TonConnectProvider = TonConnectProvider;
_TonConnectProvider_connector = new WeakMap(), _TonConnectProvider_ui = new WeakMap();
