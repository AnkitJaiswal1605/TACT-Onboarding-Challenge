#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = __importStar(require("dotenv"));
dotenv.config();
const arg_1 = __importDefault(require("arg"));
const chalk_1 = __importDefault(require("chalk"));
const create_1 = require("./create");
const run_1 = require("./run");
const build_1 = require("./build");
const test_1 = require("./test");
const help_1 = require("./help");
const InquirerUIProvider_1 = require("../ui/InquirerUIProvider");
const argSpec = {};
const runners = {
    create: create_1.create,
    run: run_1.run,
    build: build_1.build,
    test: test_1.test,
    help: help_1.help,
};
async function main() {
    const args = (0, arg_1.default)(argSpec, {
        permissive: true,
    });
    if (args._.length === 0) {
        showHelp();
        process.exit(0);
    }
    const runner = runners[args._[0]];
    if (!runner) {
        console.log(chalk_1.default.redBright(` Error: command not found.`) + ` Run 'blueprint help' to see available commands\n`);
        process.exit(1);
    }
    const ui = new InquirerUIProvider_1.InquirerUIProvider();
    await runner({
        ...args,
        _: args._.filter((a) => !(a.length > 1 && a[0] === '-')), // filter out the flags pushed by `permissive`
    }, ui);
    ui.close();
}
process.on('SIGINT', () => {
    process.exit(130);
});
main()
    .catch(console.error)
    .then(() => process.exit(0));
function showHelp() {
    console.log(chalk_1.default.blueBright(`
     ____  _    _   _ _____ ____  ____  ___ _   _ _____ 
    | __ )| |  | | | | ____|  _ \\|  _ \\|_ _| \\ | |_   _|
    |  _ \\| |  | | | |  _| | |_) | |_) || ||  \\| | | |  
    | |_) | |__| |_| | |___|  __/|  _ < | || |\\  | | |  
    |____/|_____\\___/|_____|_|   |_| \\_\\___|_| \\_| |_|  `));
    console.log(chalk_1.default.blue(`                     TON development for professionals`));
    console.log(``);
    console.log(` Usage: blueprint [OPTIONS] COMMAND [ARGS]`);
    console.log(``);
    console.log(chalk_1.default.cyanBright(`  blueprint create`) +
        `\t` +
        chalk_1.default.whiteBright(`create a new contract with .fc source, .ts wrapper, .spec.ts test`));
    console.log(`\t\t\t` + chalk_1.default.gray(`blueprint create ContractName`));
    console.log(chalk_1.default.cyanBright(`  blueprint build`) +
        `\t` +
        chalk_1.default.whiteBright(`builds a contract that has a .compile.ts file`));
    console.log(`\t\t\t` + chalk_1.default.gray(`blueprint build ContractName`));
    console.log(chalk_1.default.cyanBright(`  blueprint test`) +
        `\t` +
        chalk_1.default.whiteBright(`run the full project test suite with all .spec.ts files`));
    console.log(`\t\t\t` + chalk_1.default.gray(`blueprint test`));
    console.log(chalk_1.default.cyanBright(`  blueprint run `) +
        `\t` +
        chalk_1.default.whiteBright(`runs a script from 'scripts' directory (eg. a deploy script)`));
    console.log(`\t\t\t` + chalk_1.default.gray(`blueprint run deployContractName`));
    console.log(chalk_1.default.cyanBright(`  blueprint help`) +
        `\t` +
        chalk_1.default.whiteBright(`shows more detailed help, also see https://github.com/ton-community/blueprint`));
    console.log(`\t\t\t` + chalk_1.default.gray(`blueprint help`));
    console.log(``);
}
