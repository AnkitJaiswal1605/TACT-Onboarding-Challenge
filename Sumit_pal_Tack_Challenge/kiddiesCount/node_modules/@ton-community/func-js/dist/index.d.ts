export type SourcesMap = {
    [filename: string]: string;
};
export type SourceEntry = {
    filename: string;
    content: string;
};
export type SourcesArray = SourceEntry[];
export type SourceResolver = (path: string) => string;
export type Sources = SourcesMap | SourcesArray | SourceResolver;
export declare const mapSourceResolver: (map: SourcesMap) => SourceResolver;
export declare const arraySourceResolver: (arr: SourcesArray) => SourceResolver;
export declare const sourcesResolver: (sources: Sources) => SourceResolver;
export type CompilerConfig = {
    optLevel?: number;
} & ({
    targets: string[];
    sources: SourceResolver | SourcesMap;
} | {
    targets?: string[];
    sources: SourcesArray;
});
export type SuccessResult = {
    status: "ok";
    codeBoc: string;
    fiftCode: string;
    warnings: string;
    snapshot: SourcesArray;
};
export type ErrorResult = {
    status: "error";
    message: string;
    snapshot: SourcesArray;
};
export type CompileResult = SuccessResult | ErrorResult;
export type CompilerVersion = {
    funcVersion: string;
};
export declare class FuncCompiler {
    private module;
    private wasmBinary;
    private inputFuncVersion;
    constructor(funcWASMObject: any);
    private createModule;
    compilerVersion: () => Promise<CompilerVersion>;
    validateVersion: () => Promise<boolean>;
    compileFunc: (compileConfig: CompilerConfig) => Promise<CompileResult>;
}
export declare const latestCompiler: FuncCompiler;
export declare const compilerVersion: () => Promise<CompilerVersion>;
export declare const compileFunc: (compileConfig: CompilerConfig) => Promise<CompileResult>;
