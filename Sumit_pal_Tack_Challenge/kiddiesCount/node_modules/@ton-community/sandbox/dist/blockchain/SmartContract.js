"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SmartContract_account, _SmartContract_parsedAccount, _SmartContract_lastTxTime, _SmartContract_verbosity;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartContract = exports.TimeError = exports.GetMethodError = exports.createEmptyShardAccount = exports.createShardAccount = void 0;
const ton_core_1 = require("ton-core");
const selector_1 = require("../utils/selector");
function createShardAccount(args) {
    let wc = args.workchain ?? 0;
    let address = args.address ?? (0, ton_core_1.contractAddress)(wc, { code: args.code, data: args.data });
    let balance = args.balance ?? 0n;
    return {
        account: {
            addr: address,
            storage: {
                lastTransLt: 0n,
                balance: { coins: balance },
                state: {
                    type: 'active',
                    state: {
                        code: args.code,
                        data: args.data
                    }
                }
            },
            storageStats: {
                used: {
                    cells: 0n,
                    bits: 0n,
                    publicCells: 0n
                },
                lastPaid: 0,
                duePayment: null
            }
        },
        lastTransactionLt: 0n,
        lastTransactionHash: 0n
    };
}
exports.createShardAccount = createShardAccount;
function createEmptyAccount(address) {
    return {
        addr: address,
        storage: {
            lastTransLt: 0n,
            balance: { coins: 0n },
            state: { type: 'uninit' }
        },
        storageStats: {
            used: { cells: 0n, bits: 0n, publicCells: 0n },
            lastPaid: 0,
        }
    };
}
function createEmptyShardAccount(address) {
    return {
        account: createEmptyAccount(address),
        lastTransactionLt: 0n,
        lastTransactionHash: 0n
    };
}
exports.createEmptyShardAccount = createEmptyShardAccount;
const verbosityToExecutorVerbosity = {
    'none': 'short',
    'vm_logs': 'full',
    'vm_logs_location': 'full_location',
    'vm_logs_gas': 'full_location_gas',
    'vm_logs_full': 'full_location_stack',
    'vm_logs_verbose': 'full_location_stack_verbose',
};
class GetMethodError extends Error {
    constructor(exitCode, gasUsed, blockchainLogs, vmLogs, debugLogs) {
        super(`Unable to execute get method. Got exit_code: ${exitCode}`);
        this.exitCode = exitCode;
        this.gasUsed = gasUsed;
        this.blockchainLogs = blockchainLogs;
        this.vmLogs = vmLogs;
        this.debugLogs = debugLogs;
    }
}
exports.GetMethodError = GetMethodError;
class TimeError extends Error {
    constructor(address, previousTxTime, currentTime) {
        super(`Cannot run a transaction on account ${address} at unix timestamp ${currentTime} because it already had a transaction executed on it at unix timestamp ${previousTxTime}`);
        this.address = address;
        this.previousTxTime = previousTxTime;
        this.currentTime = currentTime;
    }
}
exports.TimeError = TimeError;
class SmartContract {
    constructor(shardAccount, blockchain) {
        _SmartContract_account.set(this, void 0);
        _SmartContract_parsedAccount.set(this, void 0);
        _SmartContract_lastTxTime.set(this, void 0);
        _SmartContract_verbosity.set(this, void 0);
        this.address = shardAccount.account.addr;
        __classPrivateFieldSet(this, _SmartContract_account, (0, ton_core_1.beginCell)().store((0, ton_core_1.storeShardAccount)(shardAccount)).endCell().toBoc().toString('base64'), "f");
        __classPrivateFieldSet(this, _SmartContract_parsedAccount, shardAccount, "f");
        __classPrivateFieldSet(this, _SmartContract_lastTxTime, shardAccount.account?.storageStats.lastPaid ?? 0, "f");
        this.blockchain = blockchain;
    }
    snapshot() {
        return {
            address: this.address,
            account: this.account,
            lastTxTime: __classPrivateFieldGet(this, _SmartContract_lastTxTime, "f"),
            verbosity: __classPrivateFieldGet(this, _SmartContract_verbosity, "f") === undefined ? undefined : { ...__classPrivateFieldGet(this, _SmartContract_verbosity, "f") },
        };
    }
    loadFrom(snapshot) {
        if (snapshot.address !== this.address) {
            throw new Error('Wrong snapshot address');
        }
        this.account = snapshot.account;
        __classPrivateFieldSet(this, _SmartContract_lastTxTime, snapshot.lastTxTime, "f");
        __classPrivateFieldSet(this, _SmartContract_verbosity, snapshot.verbosity === undefined ? undefined : { ...snapshot.verbosity }, "f");
    }
    get balance() {
        return this.account.account?.storage.balance.coins ?? 0n;
    }
    set balance(v) {
        const acc = this.account;
        if (acc.account === undefined) {
            acc.account = createEmptyAccount(this.address);
        }
        acc.account.storage.balance.coins = v;
        this.account = acc;
    }
    get lastTransactionHash() {
        return this.account.lastTransactionHash;
    }
    get lastTransactionLt() {
        return this.account.lastTransactionLt;
    }
    get accountState() {
        return this.account.account?.storage.state;
    }
    get account() {
        if (__classPrivateFieldGet(this, _SmartContract_parsedAccount, "f") === undefined) {
            __classPrivateFieldSet(this, _SmartContract_parsedAccount, (0, ton_core_1.loadShardAccount)(ton_core_1.Cell.fromBase64(__classPrivateFieldGet(this, _SmartContract_account, "f")).beginParse()), "f");
        }
        return __classPrivateFieldGet(this, _SmartContract_parsedAccount, "f");
    }
    set account(account) {
        __classPrivateFieldSet(this, _SmartContract_account, (0, ton_core_1.beginCell)().store((0, ton_core_1.storeShardAccount)(account)).endCell().toBoc().toString('base64'), "f");
        __classPrivateFieldSet(this, _SmartContract_parsedAccount, account, "f");
        __classPrivateFieldSet(this, _SmartContract_lastTxTime, account.account?.storageStats.lastPaid ?? 0, "f");
    }
    static create(blockchain, args) {
        return new SmartContract(createShardAccount(args), blockchain);
    }
    static empty(blockchain, address) {
        return new SmartContract(createEmptyShardAccount(address), blockchain);
    }
    createCommonArgs(params) {
        const now = params?.now ?? Math.floor(Date.now() / 1000);
        if (now < __classPrivateFieldGet(this, _SmartContract_lastTxTime, "f")) {
            throw new TimeError(this.address, __classPrivateFieldGet(this, _SmartContract_lastTxTime, "f"), now);
        }
        return {
            config: this.blockchain.configBase64,
            libs: this.blockchain.libs ?? null,
            verbosity: verbosityToExecutorVerbosity[this.verbosity.vmLogs],
            shardAccount: __classPrivateFieldGet(this, _SmartContract_account, "f"),
            now,
            lt: this.blockchain.lt,
            randomSeed: params?.randomSeed ?? Buffer.alloc(32),
            ignoreChksig: params?.ignoreChksig ?? false,
            debugEnabled: this.verbosity.debugLogs,
        };
    }
    receiveMessage(message, params) {
        return this.runCommon(() => this.blockchain.executor.runTransaction({
            ...this.createCommonArgs(params),
            message: (0, ton_core_1.beginCell)().store((0, ton_core_1.storeMessage)(message)).endCell(),
        }));
    }
    runTickTock(which, params) {
        return this.runCommon(() => this.blockchain.executor.runTickTock({
            ...this.createCommonArgs(params),
            which,
        }));
    }
    runCommon(run) {
        const res = run();
        if (this.verbosity.print && this.verbosity.blockchainLogs && res.logs.length > 0) {
            console.log(res.logs);
        }
        if (!res.result.success) {
            console.error('Error:', res.result.error, 'VM logs', res.result.vmResults);
            throw new Error('Error executing transaction');
        }
        if (this.verbosity.print && this.verbosity.vmLogs !== 'none' && res.result.vmLog.length > 0) {
            console.log(res.result.vmLog);
        }
        if (this.verbosity.print && this.verbosity.debugLogs && res.debugLogs.length > 0) {
            console.log(res.debugLogs);
        }
        const tx = (0, ton_core_1.loadTransaction)(ton_core_1.Cell.fromBase64(res.result.transaction).beginParse());
        __classPrivateFieldSet(this, _SmartContract_account, res.result.shardAccount, "f");
        __classPrivateFieldSet(this, _SmartContract_parsedAccount, undefined, "f");
        __classPrivateFieldSet(this, _SmartContract_lastTxTime, tx.now, "f");
        return {
            ...tx,
            blockchainLogs: res.logs,
            vmLogs: res.result.vmLog,
            debugLogs: res.debugLogs,
        };
    }
    get(method, stack = [], params) {
        if (this.account.account?.storage.state.type !== 'active') {
            throw new Error('Trying to run get method on non-active contract');
        }
        const res = this.blockchain.executor.runGetMethod({
            code: this.account.account?.storage.state.state.code,
            data: this.account.account?.storage.state.state.data,
            methodId: typeof method === 'string' ? (0, selector_1.getSelectorForMethod)(method) : method,
            stack,
            config: this.blockchain.configBase64,
            verbosity: verbosityToExecutorVerbosity[this.verbosity.vmLogs],
            libs: this.blockchain.libs,
            address: this.address,
            unixTime: params?.now ?? Math.floor(Date.now() / 1000),
            balance: this.balance,
            randomSeed: params?.randomSeed ?? Buffer.alloc(32),
            gasLimit: params?.gasLimit ?? 10000000n,
            debugEnabled: this.verbosity.debugLogs,
        });
        if (this.verbosity.print && this.verbosity.blockchainLogs && res.logs.length > 0) {
            console.log(res.logs);
        }
        if (!res.output.success) {
            throw new Error('Error invoking get method: ' + res.output.error);
        }
        if (this.verbosity.print && this.verbosity.vmLogs !== 'none' && res.output.vm_log.length > 0) {
            console.log(res.output.vm_log);
        }
        if (this.verbosity.print && this.verbosity.debugLogs && res.debugLogs.length > 0) {
            console.log(res.debugLogs);
        }
        if (res.output.vm_exit_code !== 0) {
            throw new GetMethodError(res.output.vm_exit_code, BigInt(res.output.gas_used), res.logs, res.output.vm_log, res.debugLogs);
        }
        const resStack = (0, ton_core_1.parseTuple)(ton_core_1.Cell.fromBase64(res.output.stack));
        return {
            stack: resStack,
            stackReader: new ton_core_1.TupleReader(resStack),
            exitCode: res.output.vm_exit_code,
            gasUsed: BigInt(res.output.gas_used),
            blockchainLogs: res.logs,
            vmLogs: res.output.vm_log,
            debugLogs: res.debugLogs,
        };
    }
    get verbosity() {
        return {
            ...this.blockchain.verbosity,
            ...__classPrivateFieldGet(this, _SmartContract_verbosity, "f"),
        };
    }
    set verbosity(value) {
        this.setVerbosity(value);
    }
    setVerbosity(verbosity) {
        if (typeof verbosity === 'string') {
            __classPrivateFieldSet(this, _SmartContract_verbosity, {
                ...__classPrivateFieldGet(this, _SmartContract_verbosity, "f"),
                vmLogs: verbosity,
                blockchainLogs: verbosity !== 'none',
            }, "f");
        }
        else {
            __classPrivateFieldSet(this, _SmartContract_verbosity, verbosity, "f");
        }
    }
}
exports.SmartContract = SmartContract;
_SmartContract_account = new WeakMap(), _SmartContract_parsedAccount = new WeakMap(), _SmartContract_lastTxTime = new WeakMap(), _SmartContract_verbosity = new WeakMap();
