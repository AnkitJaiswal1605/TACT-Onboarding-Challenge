/// <reference types="node" />
import { AccountState, Address } from "ton-core";
import { SmartContract } from "./SmartContract";
import { Blockchain } from "./Blockchain";
export interface BlockchainStorage {
    getContract(blockchain: Blockchain, address: Address): Promise<SmartContract>;
    knownContracts(): SmartContract[];
    clearKnownContracts(): void;
}
export declare class LocalBlockchainStorage implements BlockchainStorage {
    private contracts;
    getContract(blockchain: Blockchain, address: Address): Promise<SmartContract>;
    knownContracts(): SmartContract[];
    clearKnownContracts(): void;
}
export interface RemoteBlockchainStorageClient {
    getLastBlockSeqno(): Promise<number>;
    getAccount(seqno: number, address: Address): Promise<{
        state: AccountState;
        balance: bigint;
        lastTransaction?: {
            lt: bigint;
            hash: Buffer;
        };
    }>;
}
export declare function wrapTonClient4ForRemote(client: {
    getLastBlock(): Promise<{
        last: {
            seqno: number;
        };
    }>;
    getAccount(seqno: number, address: Address): Promise<{
        account: {
            state: {
                type: "uninit";
            } | {
                type: "active";
                code: string | null;
                data: string | null;
            } | {
                type: "frozen";
                stateHash: string;
            };
            balance: {
                coins: string;
            };
            last: {
                lt: string;
                hash: string;
            } | null;
        };
    }>;
}): RemoteBlockchainStorageClient;
export declare class RemoteBlockchainStorage implements BlockchainStorage {
    private contracts;
    private client;
    private blockSeqno?;
    constructor(client: RemoteBlockchainStorageClient, blockSeqno?: number);
    private getLastBlockSeqno;
    getContract(blockchain: Blockchain, address: Address): Promise<SmartContract>;
    knownContracts(): SmartContract[];
    clearKnownContracts(): void;
}
