/// <reference types="node" />
/// <reference types="bn.js" />
import { Address, Slice } from "../..";
export declare function configParseMasterAddress(slice: Slice | null | undefined): Address | null;
export declare function configParseWorkchainDescriptor(slice: Slice): {
    enabledSince: number;
    actialMinSplit: number;
    min_split: number;
    max_split: number;
    basic: boolean;
    active: boolean;
    accept_msgs: boolean;
    flags: number;
    zerostateRootHash: Buffer;
    zerostateFileHash: Buffer;
    version: number;
    format: {
        vmVersion: number;
        vmMode: import("bn.js");
    };
};
export declare function parseValidatorDescr(slice: Slice): {
    publicKey: Buffer;
    weight: import("bn.js");
    adnlAddress: null;
} | {
    publicKey: Buffer;
    weight: import("bn.js");
    adnlAddress: Buffer;
};
export declare function parseValidatorSet(slice: Slice): {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: null;
    list: Map<string, {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: Buffer;
    }>;
} | {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: import("bn.js");
    list: Map<string, {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: Buffer;
    }> | null;
} | undefined;
export declare function parseBridge(slice: Slice): {
    bridgeAddress: Buffer;
    oracleMultisigAddress: Buffer;
    oracles: Map<string, Buffer> | null;
    externalChainAddress: Buffer;
};
export declare function configParseMasterAddressRequired(slice: Slice | null | undefined): Address;
export declare function configParse15(slice: Slice | null | undefined): {
    validatorsElectedFor: number;
    electorsStartBefore: number;
    electorsEndBefore: number;
    stakeHeldFor: number;
};
export declare function configParse16(slice: Slice | null | undefined): {
    maxValidators: number;
    maxMainValidators: number;
    minValidators: number;
};
export declare function configParse17(slice: Slice | null | undefined): {
    minStake: import("bn.js");
    maxStake: import("bn.js");
    maxStakeFactor: number;
};
export declare function configParse18(slice: Slice | null | undefined): Map<string, {
    utime_since: import("bn.js");
    bit_price_ps: import("bn.js");
    cell_price_ps: import("bn.js");
    mc_bit_price_ps: import("bn.js");
    mc_cell_price_ps: import("bn.js");
}>;
export declare function configParse8(slice: Slice | null | undefined): {
    version: number;
    capabilities: import("bn.js");
};
export declare function configParse40(slice: Slice | null | undefined): {
    defaultFlatFine: import("bn.js");
    defaultProportionaFine: import("bn.js");
    severityFlatMult: number;
    severityProportionalMult: number;
    unfunishableInterval: number;
    longInterval: number;
    longFlatMult: number;
    longProportionalMult: number;
    mediumInterval: number;
    mediumFlatMult: number;
    mediumProportionalMult: number;
} | null;
export declare function configParse12(slice: Slice | null | undefined): Map<string, {
    enabledSince: number;
    actialMinSplit: number;
    min_split: number;
    max_split: number;
    basic: boolean;
    active: boolean;
    accept_msgs: boolean;
    flags: number;
    zerostateRootHash: Buffer;
    zerostateFileHash: Buffer;
    version: number;
    format: {
        vmVersion: number;
        vmMode: import("bn.js");
    };
}>;
export declare function configParseValidatorSet(slice: Slice | null | undefined): {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: null;
    list: Map<string, {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: Buffer;
    }>;
} | {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: import("bn.js");
    list: Map<string, {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: import("bn.js");
        adnlAddress: Buffer;
    }> | null;
} | null | undefined;
export declare function configParseBridge(slice: Slice | null | undefined): {
    bridgeAddress: Buffer;
    oracleMultisigAddress: Buffer;
    oracles: Map<string, Buffer> | null;
    externalChainAddress: Buffer;
} | null;
export declare function configParseGasLImitsPrices(slice: Slice | null | undefined): {
    flatLimit: import("bn.js");
    flatGasPrice: import("bn.js");
    other: {
        gasPrice: import("bn.js");
        gasLimit: import("bn.js");
        specialGasLimit: import("bn.js");
        gasCredit: import("bn.js");
        blockGasLimit: import("bn.js");
        freezeDueLimit: import("bn.js");
        deleteDueLimit: import("bn.js");
    } | {
        gasPrice: import("bn.js");
        gasLimit: import("bn.js");
        gasCredit: import("bn.js");
        blockGasLimit: import("bn.js");
        freezeDueLimit: import("bn.js");
        deleteDueLimit: import("bn.js");
        specialGasLimit?: undefined;
    };
};
