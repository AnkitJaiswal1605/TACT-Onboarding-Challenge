/// <reference types="bn.js" />
/// <reference types="node" />
import { Address, Contract, ContractSource, TonClient } from "..";
export declare class ConfigContract implements Contract {
    readonly address: Address;
    readonly source: ContractSource;
    private readonly client;
    constructor(client: TonClient);
    getSeqNo(): Promise<number>;
    getPublicKey(): Promise<import("bn.js")>;
    getConfigsRaw(): Promise<Map<string, import("..").Slice>>;
    getConfigs(): Promise<{
        configAddress: Address;
        electorAddress: Address;
        minterAddress: Address;
        feeCollectorAddress: Address | null;
        dnsRootAddress: Address | null;
        globalVersion: {
            version: number;
            capabilities: import("bn.js");
        };
        workchains: Map<string, {
            enabledSince: number;
            actialMinSplit: number;
            min_split: number;
            max_split: number;
            basic: boolean;
            active: boolean;
            accept_msgs: boolean;
            flags: number;
            zerostateRootHash: Buffer;
            zerostateFileHash: Buffer;
            version: number;
            format: {
                vmVersion: number;
                vmMode: import("bn.js");
            };
        }>;
        validators: {
            minStake: import("bn.js");
            maxStake: import("bn.js");
            maxStakeFactor: number;
            maxValidators: number;
            maxMainValidators: number;
            minValidators: number;
            validatorsElectedFor: number;
            electorsStartBefore: number;
            electorsEndBefore: number;
            stakeHeldFor: number;
        };
        storagePrices: Map<string, {
            utime_since: import("bn.js");
            bit_price_ps: import("bn.js");
            cell_price_ps: import("bn.js");
            mc_bit_price_ps: import("bn.js");
            mc_cell_price_ps: import("bn.js");
        }>;
        validatorSets: {
            prevValidators: {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: null;
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }>;
            } | {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: import("bn.js");
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }> | null;
            } | null | undefined;
            prevTempValidators: {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: null;
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }>;
            } | {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: import("bn.js");
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }> | null;
            } | null | undefined;
            currentValidators: {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: null;
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }>;
            } | {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: import("bn.js");
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }> | null;
            } | null | undefined;
            currentTempValidators: {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: null;
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }>;
            } | {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: import("bn.js");
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }> | null;
            } | null | undefined;
            nextValidators: {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: null;
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }>;
            } | {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: import("bn.js");
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }> | null;
            } | null | undefined;
            nextTempValidators: {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: null;
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }>;
            } | {
                timeSince: number;
                timeUntil: number;
                total: number;
                main: number;
                totalWeight: import("bn.js");
                list: Map<string, {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: null;
                } | {
                    publicKey: Buffer;
                    weight: import("bn.js");
                    adnlAddress: Buffer;
                }> | null;
            } | null | undefined;
        };
        validatorsPunish: {
            defaultFlatFine: import("bn.js");
            defaultProportionaFine: import("bn.js");
            severityFlatMult: number;
            severityProportionalMult: number;
            unfunishableInterval: number;
            longInterval: number;
            longFlatMult: number;
            longProportionalMult: number;
            mediumInterval: number;
            mediumFlatMult: number;
            mediumProportionalMult: number;
        } | null;
        bridges: {
            ethereum: {
                bridgeAddress: Buffer;
                oracleMultisigAddress: Buffer;
                oracles: Map<string, Buffer> | null;
                externalChainAddress: Buffer;
            } | null;
            binance: {
                bridgeAddress: Buffer;
                oracleMultisigAddress: Buffer;
                oracles: Map<string, Buffer> | null;
                externalChainAddress: Buffer;
            } | null;
            polygon: {
                bridgeAddress: Buffer;
                oracleMultisigAddress: Buffer;
                oracles: Map<string, Buffer> | null;
                externalChainAddress: Buffer;
            } | null;
        };
        gasPrices: {
            masterchain: {
                flatLimit: import("bn.js");
                flatGasPrice: import("bn.js");
                other: {
                    gasPrice: import("bn.js");
                    gasLimit: import("bn.js");
                    specialGasLimit: import("bn.js");
                    gasCredit: import("bn.js");
                    blockGasLimit: import("bn.js");
                    freezeDueLimit: import("bn.js");
                    deleteDueLimit: import("bn.js");
                } | {
                    gasPrice: import("bn.js");
                    gasLimit: import("bn.js");
                    gasCredit: import("bn.js");
                    blockGasLimit: import("bn.js");
                    freezeDueLimit: import("bn.js");
                    deleteDueLimit: import("bn.js");
                    specialGasLimit?: undefined;
                };
            };
            workchain: {
                flatLimit: import("bn.js");
                flatGasPrice: import("bn.js");
                other: {
                    gasPrice: import("bn.js");
                    gasLimit: import("bn.js");
                    specialGasLimit: import("bn.js");
                    gasCredit: import("bn.js");
                    blockGasLimit: import("bn.js");
                    freezeDueLimit: import("bn.js");
                    deleteDueLimit: import("bn.js");
                } | {
                    gasPrice: import("bn.js");
                    gasLimit: import("bn.js");
                    gasCredit: import("bn.js");
                    blockGasLimit: import("bn.js");
                    freezeDueLimit: import("bn.js");
                    deleteDueLimit: import("bn.js");
                    specialGasLimit?: undefined;
                };
            };
        };
    }>;
}
