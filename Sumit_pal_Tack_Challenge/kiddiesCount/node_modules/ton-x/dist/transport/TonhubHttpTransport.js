"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonhubHttpTransport = void 0;
const axios_1 = __importDefault(require("axios"));
class TonhubHttpTransport {
    constructor(config) {
        this._endpoint = (config === null || config === void 0 ? void 0 : config.endpoint) || 'https://connect.tonhubapi.com';
        this._timeout = (config === null || config === void 0 ? void 0 : config.timeout) || 5000;
        this.adapter = config === null || config === void 0 ? void 0 : config.adapter;
    }
    getAxiosConfig() {
        return this.adapter ? { timeout: this._timeout, adapter: this.adapter } : { timeout: this._timeout };
    }
    call(method, args) {
        if (method === 'session_new') {
            return this.createSession(args);
        }
        else if (method === 'session_get') {
            return this.getSession(args);
        }
        else if (method === 'session_wait') {
            return this.waitSession(args);
        }
        else if (method === 'command_new') {
            return this.createCommand(args);
        }
        else if (method === 'command_get') {
            return this.getCommand(args);
        }
        else {
            throw new Error('Unsupported method');
        }
    }
    async createSession(args) {
        let session = await axios_1.default.post(`${this._endpoint}/connect/init`, args, this.getAxiosConfig());
        return session.data;
    }
    async getSession(args) {
        if (!args.id) {
            throw new Error('Invalid session id');
        }
        let session = await axios_1.default.get(`${this._endpoint}/connect/` + args.id, this.getAxiosConfig());
        return session.data;
    }
    async waitSession(args) {
        if (!args.id) {
            throw new Error('Invalid session id');
        }
        let session = await axios_1.default.get(`${this._endpoint}/connect/` + args.id + '/wait?lastUpdated=' + (args.lastUpdated || 0), { ...this.getAxiosConfig(), timeout: 30000 });
        return session.data;
    }
    async createCommand(args) {
        let result = await axios_1.default.post(`${this._endpoint}/connect/command`, args, this.getAxiosConfig());
        return result.data;
    }
    async getCommand(args) {
        return (await axios_1.default.get(`${this._endpoint}/connect/command/` + args.appk, this.getAxiosConfig())).data;
    }
}
exports.TonhubHttpTransport = TonhubHttpTransport;
