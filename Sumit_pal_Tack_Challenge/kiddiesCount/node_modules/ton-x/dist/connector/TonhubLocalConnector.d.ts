export declare type TonhubLocalConfig = {
    version: number;
    network: 'testnet' | 'mainnet';
    address: string;
    publicKey: string;
    walletConfig: string;
    walletType: string;
    signature: string;
    time: number;
    subkey: {
        domain: string;
        publicKey: string;
        time: number;
        signature: string;
    };
};
export declare type TonhubLocalTransactionRequest = {
    to: string;
    value: string;
    stateInit?: string | null | undefined;
    text?: string | null | undefined;
    payload?: string | null | undefined;
};
export declare type TonhubLocalTransactionResponse = {
    type: 'success';
    response: string;
} | {
    type: 'rejected';
};
export declare type TonhubLocalSignRequest = {
    text?: string | null | undefined;
    payload?: string | null | undefined;
};
export declare type TonhubLocalSignResponse = {
    type: 'success';
    signature: string;
} | {
    type: 'rejected';
};
export declare class TonhubLocalConnector {
    #private;
    static verifyWalletConfig(config: {
        address: string;
        walletConfig: string;
        walletType: string;
        time: number;
        signature: string;
        subkey: {
            domain: string;
            publicKey: string;
            time: number;
            signature: string;
        };
    }): boolean;
    static isAvailable(): boolean;
    readonly network: 'mainnet' | 'testnet';
    readonly config: TonhubLocalConfig;
    constructor(network: 'mainnet' | 'testnet');
    requestTransaction(request: TonhubLocalTransactionRequest): Promise<TonhubLocalTransactionResponse>;
    requestSign(request: TonhubLocalSignRequest): Promise<TonhubLocalSignResponse>;
}
