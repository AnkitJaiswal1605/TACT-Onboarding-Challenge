"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeCell = exports.writeAddress = exports.writeComment = exports.writeStringCell = exports.writeString = void 0;
const ton_core_1 = require("ton-core");
function writeString(str, ctx) {
    let cell = (0, ton_core_1.beginCell)().storeStringTail(str).endCell();
    return writeRawSlice('string', `String "${str}"`, cell, ctx);
}
exports.writeString = writeString;
function writeStringCell(str, ctx) {
    let cell = (0, ton_core_1.beginCell)().storeStringTail(str).endCell();
    return writeRawCell('string', `String "${str}"`, cell, ctx);
}
exports.writeStringCell = writeStringCell;
function writeComment(str, ctx) {
    let cell = (0, ton_core_1.beginCell)().storeUint(0, 32).storeStringTail(str).endCell();
    return writeRawCell('comment', `Comment "${str}"`, cell, ctx);
}
exports.writeComment = writeComment;
function writeAddress(address, ctx) {
    return writeRawSlice('address', address.toString(), (0, ton_core_1.beginCell)().storeAddress(address).endCell(), ctx);
}
exports.writeAddress = writeAddress;
function writeCell(cell, ctx) {
    return writeRawCell('cell', 'Cell ' + cell.hash().toString('base64'), cell, ctx);
}
exports.writeCell = writeCell;
function writeRawSlice(prefix, comment, cell, ctx) {
    let h = cell.hash().toString('hex');
    let t = cell.toBoc({ idx: false }).toString('hex');
    let k = 'slice:' + prefix + ':' + h;
    if (ctx.isRendered(k)) {
        return `__gen_slice_${prefix}_${h}`;
    }
    ctx.markRendered(k);
    ctx.fun(`__gen_slice_${prefix}_${h}`, () => {
        ctx.signature(`slice __gen_slice_${prefix}_${h}()`);
        ctx.comment(`${comment}`);
        ctx.context('constants');
        ctx.asm(`asm "B{${t}} B>boc <s PUSHSLICE"`);
    });
    return `__gen_slice_${prefix}_${h}`;
}
function writeRawCell(prefix, comment, cell, ctx) {
    let h = cell.hash().toString('hex');
    let t = cell.toBoc({ idx: false }).toString('hex');
    let k = 'cell:' + prefix + ':' + h;
    if (ctx.isRendered(k)) {
        return `__gen_cell_${prefix}_${h}`;
    }
    ctx.markRendered(k);
    ctx.fun(`__gen_cell_${prefix}_${h}`, () => {
        ctx.signature(`cell __gen_cell_${prefix}_${h}()`);
        ctx.comment(`${comment}`);
        ctx.context('constants');
        ctx.asm(`asm "B{${t}} B>boc PUSHREF"`);
    });
    return `__gen_cell_${prefix}_${h}`;
}
