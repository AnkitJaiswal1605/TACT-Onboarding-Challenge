import { WriterContext } from "../Writer";
export declare const ops: {
    writer: (type: string, ctx: WriterContext) => string;
    writerCell: (type: string, ctx: WriterContext) => string;
    writerCellOpt: (type: string, ctx: WriterContext) => string;
    reader: (type: string, ctx: WriterContext) => string;
    readerBounced: (type: string, ctx: WriterContext) => string;
    readerOpt: (type: string, ctx: WriterContext) => string;
    typeField: (type: string, name: string, ctx: WriterContext) => string;
    typeTensorCast: (type: string, ctx: WriterContext) => string;
    typeNotNull: (type: string, ctx: WriterContext) => string;
    typeAsOptional: (type: string, ctx: WriterContext) => string;
    typeToTuple: (type: string, ctx: WriterContext) => string;
    typeToOptTuple: (type: string, ctx: WriterContext) => string;
    typeFromTuple: (type: string, ctx: WriterContext) => string;
    typeFromOptTuple: (type: string, ctx: WriterContext) => string;
    typeToExternal: (type: string, ctx: WriterContext) => string;
    typeToOptExternal: (type: string, ctx: WriterContext) => string;
    typeContsturctor: (type: string, fields: string[], ctx: WriterContext) => string;
    contractInit: (type: string, ctx: WriterContext) => string;
    contractInitChild: (type: string, ctx: WriterContext) => string;
    contractLoad: (type: string, ctx: WriterContext) => string;
    contractStore: (type: string, ctx: WriterContext) => string;
    contractRouter: (type: string, kind: 'internal' | 'external') => string;
    receiveEmpty: (type: string, kind: 'internal' | 'external') => string;
    receiveType: (type: string, kind: 'internal' | 'external', msg: string) => string;
    receiveAnyText: (type: string, kind: 'internal' | 'external') => string;
    receiveText: (type: string, kind: 'internal' | 'external', hash: string) => string;
    receiveAny: (type: string, kind: 'internal' | 'external') => string;
    receiveTypeBounce: (type: string, msg: string) => string;
    receiveBounceAny: (type: string) => string;
    extension: (type: string, name: string) => string;
    global: (name: string) => string;
    str: (id: string, ctx: WriterContext) => string;
};
