;;
;; Type: IntrinsicsTester
;;

builder $IntrinsicsTester$_store(builder build_0, (int, slice, slice, cell, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'b).end_cell());
    build_0 = __tact_store_address(build_0, v'c);
    build_0 = build_0.store_ref(v'd);
    build_0 = build_0.store_int(v'e, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'f, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, slice, cell, int, int))) $IntrinsicsTester$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_ref().begin_parse();
    var v'c = sc_0~__tact_load_address();
    var v'd = sc_0~load_ref();
    var v'e = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'f = sc_1~load_int(257);
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}

(int, slice, slice, cell, int, int) $IntrinsicsTester$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$IntrinsicsTester$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $IntrinsicsTester$_contract_init();
    }
}

() $IntrinsicsTester$_contract_store((int, slice, slice, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $IntrinsicsTester$_store(b, v);
    set_data(b.end_cell());
}