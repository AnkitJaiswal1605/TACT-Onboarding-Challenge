#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "deep_C.headers.fc";
#include "deep_C.stdlib.fc";
#include "deep_C.constants.fc";
#include "deep_C.storage.fc";

;;
;; Contract C functions
;;

(slice) $C$_contract_init(slice $parent) impure inline_ref {
    var (($self'parent)) = (null());
    $self'parent = $parent;
    return ($self'parent);
}

;;
;; Receivers of a Contract C
;;

((slice), ()) $C$_internal_text_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d((slice) $self) impure inline {
    var ($self'parent) = $self;
    var ($init'code, $init'data) = $C$_init_child(__tact_context_sys, $self'parent);
    slice $address = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_value_to_mode_bounce_code_data_body(0, $address, (64 + 2), true, $init'code, $init'data, __gen_cell_comment_fc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272()));
    return (($self'parent), ());
}

((slice), ()) $C$_internal_text_fc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272((slice) $self) impure inline {
    var ($self'parent) = $self;
    return (($self'parent), ());
}

;;
;; Get methods of a Contract C
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbDHWb7N1vg2jJZuYfS81iQUfoETgsWFj9BL687i6RFXC";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract C
;;

((slice), int) $C$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Message" message
        if (text_op == 0xb41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d) {
            self~$C$_internal_text_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d();
            return (self, true);
        }
        
        ;; Receive "Message2" message
        if (text_op == 0xfc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272) {
            self~$C$_internal_text_fc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $C$_contract_load();
    
    ;; Handle operation
    int handled = self~$C$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $C$_contract_store(self);
}
