global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;
global int __tact_randomized;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_if(137, h == 1279);
    throw_unless(136, h == 1024);
    return address;
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);
    
    while((sliceBits > 0) | (sliceRefs > 0)) {
    
        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;
    
        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }
    
        ;; Update builders
        builders = cons(b, tail);
    
        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }
    
    return ((builders), ());
}

slice __tact_int_to_string(int src) inline_ref {
    var b = begin_cell();
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    if (src < 1000000000000000000000000000000) {
        int len = 0;
        int value = 0;
        int mult = 1;
        do {
            (src, int res) = src.divmod(10);
            value = value + (res + 48) * mult;
            mult = mult * 256;
            len = len + 1;
        } until (src == 0);
    
        b = b.store_uint(value, len * 8);
    } else {
        tuple t = empty_tuple();
        int len = 0;
        do {
            int digit = src % 10;
            t~tpush(digit);
            len = len + 1;
            src = src / 10;
        } until (src == 0);
    
        int c = len - 1;
        repeat(len) {
            int v = t.at(c);
            b = b.store_uint(v + 48, 8);
            c = c - 1;
        }
    }
    return b.end_cell().begin_parse();
}

slice __tact_float_to_string(int src, int digits) inline_ref {
    throw_if(134, (digits <= 0) | (digits > 77));
    builder b = begin_cell();
    
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    ;; Process rem part
    int skip = true;
    int len = 0;
    int rem = 0;
    tuple t = empty_tuple();
    repeat(digits) {
        (src, rem) = src.divmod(10);
        if ( ~ ( skip & ( rem == 0 ) ) ) {
            skip = false;
            t~tpush(rem + 48);
            len = len + 1;
        }
    }
    
    ;; Process dot
    if (~ skip) {
        t~tpush(46);
        len = len + 1;
    }
    
    ;; Main
    do {
        (src, rem) = src.divmod(10);
        t~tpush(rem + 48);
        len = len + 1;
    } until (src == 0);
    
    ;; Assemble
    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v, 8);
        c = c - 1;
    }
    
    ;; Result
    return b.end_cell().begin_parse();
}

slice $Builder$_fun_asSlice(builder $self) impure inline {
    var ($self) = $self;
    return begin_parse(end_cell($self));
}

slice $Slice$_fun_fromBase64(slice $self) impure inline_ref {
    var ($self) = $self;
    int $size = (slice_bits($self) / 8);
    builder $result = begin_cell();
    repeat ($size) {
        int $code = $self~load_uint(8);
        if (( (($code >= 65)) ? (($code <= 90)) : (false) )) {
            $result = store_uint($result, ($code - 65), 6);
        } elseif (( (($code >= 97)) ? (($code <= 122)) : (false) )) {
            $result = store_uint($result, ($code - (97 - 26)), 6);
        } elseif (( (($code >= 48)) ? (($code <= 57)) : (false) )) {
            $result = store_uint($result, ($code + (52 - 48)), 6);
        } elseif (( (($code == 45)) ? (true) : (($code == 43)) )) {
            $result = store_uint($result, 62, 6);
        } elseif (( (($code == 95)) ? (true) : (($code == 47)) )) {
            $result = store_uint($result, 63, 6);
        } elseif (($code == 61)) {
        } else {
            throw(134);
        }
    }
    int $total = builder_bits($result);
    int $padding = ($total % 8);
    if (($padding != 0)) {
        slice $s = $Builder$_fun_asSlice($result);
        return $s~load_bits(($total - $padding));
    } else {
        return $Builder$_fun_asSlice($result);
    }
}

slice $String$_fun_fromBase64(slice $self) impure inline {
    var ($self) = $self;
    return $Slice$_fun_fromBase64(__tact_str_to_slice($self));
}