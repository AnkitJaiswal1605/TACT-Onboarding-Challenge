;;
;; Type: Update
;; Header: 0x329ba577
;; TLB: update#329ba577 a:int257 b:int257 c:int257 d:int257 e:int257 f:int257 g:int257 h:int257 i:int257 = Update
;;

(slice, ((int, int, int, int, int, int, int, int, int))) $Update$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 849061239);
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(257);
    var v'c = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'd = sc_1~load_int(257);
    var v'e = sc_1~load_int(257);
    var v'f = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'g = sc_2~load_int(257);
    var v'h = sc_2~load_int(257);
    var v'i = sc_2~load_int(257);
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h, v'i));
}

;;
;; Type: SerializationTester
;;

builder $SerializationTester$_store(builder build_0, (int, int, int, int, int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h, v'i) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_int(v'b, 257);
    build_0 = build_0.store_int(v'c, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'd, 257);
    build_1 = build_1.store_int(v'e, 257);
    build_1 = build_1.store_int(v'f, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'g, 257);
    build_2 = build_2.store_int(v'h, 257);
    build_2 = build_2.store_int(v'i, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, int, int, int, int, int, int))) $SerializationTester$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(257);
    var v'c = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'd = sc_1~load_int(257);
    var v'e = sc_1~load_int(257);
    var v'f = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'g = sc_2~load_int(257);
    var v'h = sc_2~load_int(257);
    var v'i = sc_2~load_int(257);
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h, v'i));
}

(slice, ((int, int, int, int, int, int, int, int, int))) $SerializationTester$init$_load(slice sc_0) inline_ref {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(257);
    var v'c = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'd = sc_1~load_int(257);
    var v'e = sc_1~load_int(257);
    var v'f = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'g = sc_2~load_int(257);
    var v'h = sc_2~load_int(257);
    var v'i = sc_2~load_int(257);
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h, v'i));
}

(int, int, int, int, int, int, int, int, int) $SerializationTester$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SerializationTester$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int a, int b, int c, int d, int e, int f, int g, int h, int i) = $sc~$SerializationTester$init$_load();
        $sc.end_parse();
        return $SerializationTester$_contract_init(a, b, c, d, e, f, g, h, i);
    }
}

() $SerializationTester$_contract_store((int, int, int, int, int, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SerializationTester$_store(b, v);
    set_data(b.end_cell());
}