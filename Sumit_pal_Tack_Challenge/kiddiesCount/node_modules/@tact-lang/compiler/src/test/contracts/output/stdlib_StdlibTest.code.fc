#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "stdlib_StdlibTest.headers.fc";
#include "stdlib_StdlibTest.stdlib.fc";
#include "stdlib_StdlibTest.storage.fc";

;;
;; Contract StdlibTest functions
;;

(int) $StdlibTest$_contract_init() impure inline_ref {
    var (($self'v)) = (0);
    return ($self'v);
}

((int), int) $StdlibTest$_fun_sliceEmpty((int) $self, slice $sc) impure inline_ref {
    var (($self'v)) = $self;
    return (($self'v), slice_empty?($sc));
}

((int), int) $StdlibTest$_fun_sliceBits((int) $self, slice $sc) impure inline_ref {
    var (($self'v)) = $self;
    return (($self'v), slice_bits($sc));
}

((int), int) $StdlibTest$_fun_sliceRefs((int) $self, slice $sc) impure inline_ref {
    var (($self'v)) = $self;
    return (($self'v), slice_refs($sc));
}

;;
;; Receivers of a Contract StdlibTest
;;

(((int)), ()) %$StdlibTest$_internal_empty((int) $self) impure inline {
    var ($self'v) = $self;
    return (($self'v), ());
}

;;
;; Get methods of a Contract StdlibTest
;;

_ %sliceEmpty(slice $$sc) method_id(73995) {
    slice $sc = $$sc;
    var self = $StdlibTest$_contract_load();
    var res = self~$StdlibTest$_fun_sliceEmpty($sc);
    return res;
}

_ %sliceBits(slice $$sc) method_id(75090) {
    slice $sc = $$sc;
    var self = $StdlibTest$_contract_load();
    var res = self~$StdlibTest$_fun_sliceBits($sc);
    return res;
}

_ %sliceRefs(slice $$sc) method_id(77445) {
    slice $sc = $$sc;
    var self = $StdlibTest$_contract_load();
    var res = self~$StdlibTest$_fun_sliceRefs($sc);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWhptfo85jfiNyGwbjaB8Sw4K1bR9v2Wqi2naxYqepCfD";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract StdlibTest
;;

((int), int) $StdlibTest$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$StdlibTest$_internal_empty();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $StdlibTest$_contract_load();
    
    ;; Handle operation
    int handled = self~$StdlibTest$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $StdlibTest$_contract_store(self);
}
