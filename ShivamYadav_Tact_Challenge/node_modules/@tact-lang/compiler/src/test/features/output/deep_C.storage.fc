;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: C
;;

builder $C$_store(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(slice, ((slice))) $C$_load(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    return (sc_0, (v'parent));
}

builder $C$init$_store(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(slice, ((slice))) $C$init$_load(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    return (sc_0, (v'parent));
}

(slice) $C$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$C$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice parent) = $sc~$C$init$_load();
        $sc.end_parse();
        return $C$_contract_init(parent);
    }
}

() $C$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $C$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $C$_init_child(cell sys', slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: C
    cell mine = __tact_dict_get_code(source, 30887);
    contracts = __tact_dict_set_code(contracts, 30887, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $C$init$_store(b, ($parent));
    return (mine, b.end_cell());
}