#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "dns_DNSTester.headers.fc";
#include "dns_DNSTester.stdlib.fc";
#include "dns_DNSTester.native.fc";
#include "dns_DNSTester.storage.fc";

;;
;; Contract DNSTester functions
;;

tuple $DNSTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

int $global_dnsExtractTopDomainLength(slice $subdomain) impure inline_ref {
    int $i = 0;
    int $needBreak = false;
    do {
        int $char = $subdomain~load_uint(8);
        $needBreak = ($char == 0);
        if ((~ $needBreak)) {
            $i = ($i + 8);
        }
    } until ($needBreak);
    throw_unless(24161, ($i != 0));
    return $i;
}

slice $global_dnsExtractTopDomain(slice $subdomain) impure inline_ref {
    int $len = $global_dnsExtractTopDomainLength($subdomain);
    return $subdomain~load_bits($len);
}

(tuple, slice) $DNSTester$_fun_stringToInternal(tuple $self, slice $src) impure inline_ref {
    var ($self) = $self;
    return ($self, dns_string_to_internal($src));
}

(tuple, slice) $DNSTester$_fun_internalNormalize(tuple $self, slice $src) impure inline_ref {
    var ($self) = $self;
    return ($self, dns_internal_normalize($src));
}

(tuple, int) $DNSTester$_fun_dnsInternalVerify(tuple $self, slice $subdomain) impure inline_ref {
    var ($self) = $self;
    return ($self, dns_internal_verify($subdomain));
}

(tuple, int) $DNSTester$_fun_dnsExtractTopDomainLength(tuple $self, slice $subdomain) impure inline_ref {
    var ($self) = $self;
    return ($self, $global_dnsExtractTopDomainLength($subdomain));
}

(tuple, slice) $DNSTester$_fun_dnsExtractTopDomain(tuple $self, slice $subdomain) impure inline_ref {
    var ($self) = $self;
    return ($self, $global_dnsExtractTopDomain($subdomain));
}

(tuple, (int, cell)) $DNSTester$_fun_doResolveDNS(tuple $self, slice $subdomain, int $category) impure inline_ref {
    var ($self) = $self;
    return ($self, $DNSResolveResult$_constructor_prefix_record(slice_bits($subdomain), end_cell(store_slice(begin_cell(), $subdomain))));
}

(tuple, (int, cell)) $DNSTester$_fun_dnsresolve(tuple $self, slice $subdomain, int $category) impure inline_ref {
    var ($self) = $self;
    int $delta = 0;
    if ((preload_uint($subdomain, 8) == 0)) {
        $subdomain~load_uint(8);
        $delta = ($delta + 8);
    }
    throw_unless(24161, dns_internal_verify($subdomain));
    var ($res'prefix, $res'record) = $self~$DNSTester$_fun_doResolveDNS($subdomain, $category);
    return ($self, $DNSResolveResult$_constructor_prefix_record(($res'prefix + $delta), $res'record));
}

;;
;; Receivers of a Contract DNSTester
;;

((tuple), ()) $DNSTester$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$DNSTester$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract DNSTester
;;

_ %stringToInternal(slice $$src) method_id(97933) {
    slice $src = $$src;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_stringToInternal($src);
    return res;
}

_ %internalNormalize(slice $$src) method_id(114271) {
    slice $src = $$src;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_internalNormalize($src);
    return res;
}

_ %dnsInternalVerify(slice $$subdomain) method_id(74415) {
    slice $subdomain = $$subdomain;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsInternalVerify($subdomain);
    return res;
}

_ %dnsExtractTopDomainLength(slice $$subdomain) method_id(114191) {
    slice $subdomain = $$subdomain;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsExtractTopDomainLength($subdomain);
    return res;
}

_ %dnsExtractTopDomain(slice $$subdomain) method_id(103737) {
    slice $subdomain = $$subdomain;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsExtractTopDomain($subdomain);
    return res;
}

_ %dnsresolve(slice $$subdomain, int $$category) method_id(123660) {
    slice $subdomain = $$subdomain;
    int $category = $$category;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsresolve($subdomain, $category);
    return $DNSResolveResult$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbX5KeS4DJPf1vgtR8QoYNJ6gSM2Z9cWhBuSE49g2mfyv";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract DNSTester
;;

(tuple, int) $DNSTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$DNSTester$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $DNSTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$DNSTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $DNSTester$_contract_store(self);
}
