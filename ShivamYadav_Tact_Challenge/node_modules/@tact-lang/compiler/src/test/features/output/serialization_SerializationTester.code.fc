#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "serialization_SerializationTester.headers.fc";
#include "serialization_SerializationTester.stdlib.fc";
#include "serialization_SerializationTester.storage.fc";

;;
;; Contract SerializationTester functions
;;

(int, int, int, int, int, int, int, int, int) $SerializationTester$_contract_init(int $a, int $b, int $c, int $d, int $e, int $f, int $g, int $h, int $i) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = (null(), null(), null(), null(), null(), null(), null(), null(), null());
    $self'a = $a;
    $self'b = $b;
    $self'c = $c;
    $self'd = $d;
    $self'e = $e;
    $self'f = $f;
    $self'g = $g;
    $self'h = $h;
    $self'i = $i;
    return ($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getA((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'a);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getB((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'b);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getC((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'c);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getD((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'd);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getE((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'e);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getF((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'f);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getG((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'g);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getH((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'h);
}

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_fun_getI((int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i)) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), $self'i);
}

;;
;; Receivers of a Contract SerializationTester
;;

(((int, int, int, int, int, int, int, int, int)), ()) %$SerializationTester$_internal_empty((int, int, int, int, int, int, int, int, int) $self) impure inline {
    var ($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i) = $self;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), ());
}

(((int, int, int, int, int, int, int, int, int)), ()) $SerializationTester$_internal_binary_Update((int, int, int, int, int, int, int, int, int) $self, (int, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i) = $self;
    var ($msg'a, $msg'b, $msg'c, $msg'd, $msg'e, $msg'f, $msg'g, $msg'h, $msg'i) = $msg;
    $self'a = $msg'a;
    $self'b = $msg'b;
    $self'c = $msg'c;
    $self'd = $msg'd;
    $self'e = $msg'e;
    $self'f = $msg'f;
    $self'h = $msg'h;
    $self'i = $msg'i;
    return (($self'a, $self'b, $self'c, $self'd, $self'e, $self'f, $self'g, $self'h, $self'i), ());
}

;;
;; Get methods of a Contract SerializationTester
;;

_ %getA() method_id(123932) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getA();
    return res;
}

_ %getB() method_id(119935) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getB();
    return res;
}

_ %getC() method_id(115806) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getC();
    return res;
}

_ %getD() method_id(111801) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getD();
    return res;
}

_ %getE() method_id(107672) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getE();
    return res;
}

_ %getF() method_id(103675) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getF();
    return res;
}

_ %getG() method_id(99546) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getG();
    return res;
}

_ %getH() method_id(95541) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getH();
    return res;
}

_ %getI() method_id(91412) {
    var self = $SerializationTester$_contract_load();
    var res = self~$SerializationTester$_fun_getI();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmcQWMaGpif9hbBXFppQzUy5gHod88kFxjvtSybxTzkwV3";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SerializationTester
;;

((int, int, int, int, int, int, int, int, int), int) $SerializationTester$_contract_router_internal((int, int, int, int, int, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$SerializationTester$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Update message
    if (op == 849061239) {
        var msg = in_msg~$Update$_load();
        self~$SerializationTester$_internal_binary_Update(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SerializationTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$SerializationTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SerializationTester$_contract_store(self);
}
