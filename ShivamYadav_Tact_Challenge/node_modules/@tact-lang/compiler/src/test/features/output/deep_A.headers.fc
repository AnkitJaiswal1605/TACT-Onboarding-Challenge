;;
;; Header files for A
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $B$init$_store
builder $B$init$_store(builder build_0, (slice) v) inline;

;; $A$_contract_init
tuple $A$_contract_init() impure inline_ref;

;; $A$_contract_load
tuple $A$_contract_load() impure inline_ref;

;; $A$_contract_store
() $A$_contract_store(tuple v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $B$_init_child
(cell, cell) $B$_init_child(cell sys', slice $parent) inline_ref;

;; $A$_fun_getNext
(tuple, (cell, cell)) $A$_fun_getNext(tuple $self) impure inline_ref;

;; $SendParameters$_constructor_value_to_mode_bounce_code_data_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline;
