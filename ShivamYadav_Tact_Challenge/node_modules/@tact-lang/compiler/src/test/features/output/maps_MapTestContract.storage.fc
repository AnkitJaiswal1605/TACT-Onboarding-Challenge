;;
;; Type: SetIntMap1
;; Header: 0x5a04a318
;; TLB: set_int_map1#5a04a318 key:int257 value:Maybe int257 = SetIntMap1
;;

(slice, ((int, int))) $SetIntMap1$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1510253336);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap2
;; Header: 0x6125cef6
;; TLB: set_int_map2#6125cef6 key:int257 value:Maybe bool = SetIntMap2
;;

(slice, ((int, int))) $SetIntMap2$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1629867766);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap3
;; Header: 0xd7689249
;; TLB: set_int_map3#d7689249 key:int257 value:Maybe ^cell = SetIntMap3
;;

(slice, ((int, cell))) $SetIntMap3$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3613954633);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SomeStruct
;; TLB: _ value:int257 = SomeStruct
;;

builder $SomeStruct$_store(builder build_0, (int) v) inline {
    var (v'value) = v;
    build_0 = build_0.store_int(v'value, 257);
    return build_0;
}

cell $SomeStruct$_store_cell((int) v) inline {
    return $SomeStruct$_store(begin_cell(), v).end_cell();
}

((int)) $SomeStruct$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'value) = __tact_tuple_destroy_1(v);
    return (vvv'value);
}

cell $SomeStruct$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $SomeStruct$_store_cell($SomeStruct$_not_null(v));
}

(slice, ((int))) $SomeStruct$_load(slice sc_0) inline {
    var v'value = sc_0~load_int(257);
    return (sc_0, (v'value));
}

tuple $SomeStruct$_as_optional((int) v) inline {
    var (v'value) = v;
    return __tact_tuple_create_1(v'value);
}

tuple $SomeStruct$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $SomeStruct$_as_optional(sc~$SomeStruct$_load());
}

tuple $SomeStruct$_to_tuple(((int)) v) inline {
    var (v'value) = v;
    return __tact_tuple_create_1(v'value);
}

tuple $SomeStruct$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $SomeStruct$_to_tuple($SomeStruct$_not_null(v)); 
}

tuple $SomeStruct$_to_opt_external(tuple v) inline {
    var loaded = $SomeStruct$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

;;
;; Type: SetIntMap4
;; Header: 0x16d453c5
;; TLB: set_int_map4#16d453c5 key:int257 value:Maybe SomeStruct{value:int257} = SetIntMap4
;;

(slice, ((int, tuple))) $SetIntMap4$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 383013829);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? $SomeStruct$_as_optional(sc_0~$SomeStruct$_load()) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap5
;; Header: 0xa779553f
;; TLB: set_int_map5#a779553f key:int257 value:Maybe address = SetIntMap5
;;

(slice, ((int, slice))) $SetIntMap5$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2809746751);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~__tact_load_address_opt();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap6
;; Header: 0x4b0609ca
;; TLB: set_int_map6#4b0609ca key:int257 value:Maybe int257 = SetIntMap6
;;

(slice, ((int, int))) $SetIntMap6$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1258686922);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetUIntMap7
;; Header: 0xd4623107
;; TLB: set_u_int_map7#d4623107 key:int257 value:Maybe int257 = SetUIntMap7
;;

(slice, ((int, int))) $SetUIntMap7$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3563204871);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap8
;; Header: 0x71e1acee
;; TLB: set_int_map8#71e1acee key:int257 value:Maybe int257 = SetIntMap8
;;

(slice, ((int, int))) $SetIntMap8$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1910615278);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetUIntMap9
;; Header: 0x693e3a87
;; TLB: set_u_int_map9#693e3a87 key:int257 value:Maybe int257 = SetUIntMap9
;;

(slice, ((int, int))) $SetUIntMap9$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1765685895);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap1
;; Header: 0x684e5e4d
;; TLB: set_addr_map1#684e5e4d key:address value:Maybe int257 = SetAddrMap1
;;

(slice, ((slice, int))) $SetAddrMap1$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1749966413);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap2
;; Header: 0x2533e390
;; TLB: set_addr_map2#2533e390 key:address value:Maybe bool = SetAddrMap2
;;

(slice, ((slice, int))) $SetAddrMap2$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 624157584);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap3
;; Header: 0xfee42706
;; TLB: set_addr_map3#fee42706 key:address value:Maybe ^cell = SetAddrMap3
;;

(slice, ((slice, cell))) $SetAddrMap3$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4276365062);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap4
;; Header: 0x645c6979
;; TLB: set_addr_map4#645c6979 key:address value:Maybe SomeStruct{value:int257} = SetAddrMap4
;;

(slice, ((slice, tuple))) $SetAddrMap4$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1683777913);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? $SomeStruct$_as_optional(sc_0~$SomeStruct$_load()) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap5
;; Header: 0x67cb4d03
;; TLB: set_addr_map5#67cb4d03 key:address value:Maybe address = SetAddrMap5
;;

(slice, ((slice, slice))) $SetAddrMap5$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1741376771);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~__tact_load_address_opt();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap6
;; Header: 0x67dfff02
;; TLB: set_addr_map6#67dfff02 key:address value:Maybe int257 = SetAddrMap6
;;

(slice, ((slice, int))) $SetAddrMap6$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1742733058);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap7
;; Header: 0x7a6e958f
;; TLB: set_addr_map7#7a6e958f key:address value:Maybe int257 = SetAddrMap7
;;

(slice, ((slice, int))) $SetAddrMap7$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2054067599);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: MapTestContract
;;

builder $MapTestContract$_store(builder build_0, (cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) v) inline {
    var (v'intMap1, v'intMap2, v'intMap3, v'intMap4, v'intMap5, v'intMap6_1, v'intMap6_2, v'intMap6_3, v'intMap6_4, v'intMap6_5, v'intMap6_6, v'intMap6_7, v'intMap7_1, v'intMap7_2, v'intMap7_3, v'intMap7_4, v'intMap7_5, v'intMap7_6, v'intMap8_1, v'intMap8_2, v'intMap8_3, v'intMap8_4, v'intMap8_5, v'intMap8_6, v'intMap8_7, v'intMap9_1, v'intMap9_2, v'intMap9_3, v'intMap9_4, v'intMap9_5, v'intMap9_6, v'addrMap1, v'addrMap2, v'addrMap3, v'addrMap4, v'addrMap5, v'addrMap6_1, v'addrMap6_2, v'addrMap6_3, v'addrMap6_4, v'addrMap6_5, v'addrMap6_6, v'addrMap6_7, v'addrMap7_1, v'addrMap7_2, v'addrMap7_3, v'addrMap7_4, v'addrMap7_5, v'addrMap7_6) = v;
    build_0 = build_0.store_dict(v'intMap1);
    build_0 = build_0.store_dict(v'intMap2);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'intMap3);
    build_1 = build_1.store_dict(v'intMap4);
    build_1 = build_1.store_dict(v'intMap5);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'intMap6_1);
    build_2 = build_2.store_dict(v'intMap6_2);
    build_2 = build_2.store_dict(v'intMap6_3);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'intMap6_4);
    build_3 = build_3.store_dict(v'intMap6_5);
    build_3 = build_3.store_dict(v'intMap6_6);
    var build_4 = begin_cell();
    build_4 = build_4.store_dict(v'intMap6_7);
    build_4 = build_4.store_dict(v'intMap7_1);
    build_4 = build_4.store_dict(v'intMap7_2);
    var build_5 = begin_cell();
    build_5 = build_5.store_dict(v'intMap7_3);
    build_5 = build_5.store_dict(v'intMap7_4);
    build_5 = build_5.store_dict(v'intMap7_5);
    var build_6 = begin_cell();
    build_6 = build_6.store_dict(v'intMap7_6);
    build_6 = build_6.store_dict(v'intMap8_1);
    build_6 = build_6.store_dict(v'intMap8_2);
    var build_7 = begin_cell();
    build_7 = build_7.store_dict(v'intMap8_3);
    build_7 = build_7.store_dict(v'intMap8_4);
    build_7 = build_7.store_dict(v'intMap8_5);
    var build_8 = begin_cell();
    build_8 = build_8.store_dict(v'intMap8_6);
    build_8 = build_8.store_dict(v'intMap8_7);
    build_8 = build_8.store_dict(v'intMap9_1);
    var build_9 = begin_cell();
    build_9 = build_9.store_dict(v'intMap9_2);
    build_9 = build_9.store_dict(v'intMap9_3);
    build_9 = build_9.store_dict(v'intMap9_4);
    var build_10 = begin_cell();
    build_10 = build_10.store_dict(v'intMap9_5);
    build_10 = build_10.store_dict(v'intMap9_6);
    build_10 = build_10.store_dict(v'addrMap1);
    var build_11 = begin_cell();
    build_11 = build_11.store_dict(v'addrMap2);
    build_11 = build_11.store_dict(v'addrMap3);
    build_11 = build_11.store_dict(v'addrMap4);
    var build_12 = begin_cell();
    build_12 = build_12.store_dict(v'addrMap5);
    build_12 = build_12.store_dict(v'addrMap6_1);
    build_12 = build_12.store_dict(v'addrMap6_2);
    var build_13 = begin_cell();
    build_13 = build_13.store_dict(v'addrMap6_3);
    build_13 = build_13.store_dict(v'addrMap6_4);
    build_13 = build_13.store_dict(v'addrMap6_5);
    var build_14 = begin_cell();
    build_14 = build_14.store_dict(v'addrMap6_6);
    build_14 = build_14.store_dict(v'addrMap6_7);
    build_14 = build_14.store_dict(v'addrMap7_1);
    var build_15 = begin_cell();
    build_15 = build_15.store_dict(v'addrMap7_2);
    build_15 = build_15.store_dict(v'addrMap7_3);
    build_15 = build_15.store_dict(v'addrMap7_4);
    var build_16 = begin_cell();
    build_16 = build_16.store_dict(v'addrMap7_5);
    build_16 = build_16.store_dict(v'addrMap7_6);
    build_15 = store_ref(build_15, build_16.end_cell());
    build_14 = store_ref(build_14, build_15.end_cell());
    build_13 = store_ref(build_13, build_14.end_cell());
    build_12 = store_ref(build_12, build_13.end_cell());
    build_11 = store_ref(build_11, build_12.end_cell());
    build_10 = store_ref(build_10, build_11.end_cell());
    build_9 = store_ref(build_9, build_10.end_cell());
    build_8 = store_ref(build_8, build_9.end_cell());
    build_7 = store_ref(build_7, build_8.end_cell());
    build_6 = store_ref(build_6, build_7.end_cell());
    build_5 = store_ref(build_5, build_6.end_cell());
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell))) $MapTestContract$_load(slice sc_0) inline {
    var v'intMap1 = sc_0~load_dict();
    var v'intMap2 = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'intMap3 = sc_1~load_dict();
    var v'intMap4 = sc_1~load_dict();
    var v'intMap5 = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'intMap6_1 = sc_2~load_dict();
    var v'intMap6_2 = sc_2~load_dict();
    var v'intMap6_3 = sc_2~load_dict();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'intMap6_4 = sc_3~load_dict();
    var v'intMap6_5 = sc_3~load_dict();
    var v'intMap6_6 = sc_3~load_dict();
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'intMap6_7 = sc_4~load_dict();
    var v'intMap7_1 = sc_4~load_dict();
    var v'intMap7_2 = sc_4~load_dict();
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'intMap7_3 = sc_5~load_dict();
    var v'intMap7_4 = sc_5~load_dict();
    var v'intMap7_5 = sc_5~load_dict();
    slice sc_6 = sc_5~load_ref().begin_parse();
    var v'intMap7_6 = sc_6~load_dict();
    var v'intMap8_1 = sc_6~load_dict();
    var v'intMap8_2 = sc_6~load_dict();
    slice sc_7 = sc_6~load_ref().begin_parse();
    var v'intMap8_3 = sc_7~load_dict();
    var v'intMap8_4 = sc_7~load_dict();
    var v'intMap8_5 = sc_7~load_dict();
    slice sc_8 = sc_7~load_ref().begin_parse();
    var v'intMap8_6 = sc_8~load_dict();
    var v'intMap8_7 = sc_8~load_dict();
    var v'intMap9_1 = sc_8~load_dict();
    slice sc_9 = sc_8~load_ref().begin_parse();
    var v'intMap9_2 = sc_9~load_dict();
    var v'intMap9_3 = sc_9~load_dict();
    var v'intMap9_4 = sc_9~load_dict();
    slice sc_10 = sc_9~load_ref().begin_parse();
    var v'intMap9_5 = sc_10~load_dict();
    var v'intMap9_6 = sc_10~load_dict();
    var v'addrMap1 = sc_10~load_dict();
    slice sc_11 = sc_10~load_ref().begin_parse();
    var v'addrMap2 = sc_11~load_dict();
    var v'addrMap3 = sc_11~load_dict();
    var v'addrMap4 = sc_11~load_dict();
    slice sc_12 = sc_11~load_ref().begin_parse();
    var v'addrMap5 = sc_12~load_dict();
    var v'addrMap6_1 = sc_12~load_dict();
    var v'addrMap6_2 = sc_12~load_dict();
    slice sc_13 = sc_12~load_ref().begin_parse();
    var v'addrMap6_3 = sc_13~load_dict();
    var v'addrMap6_4 = sc_13~load_dict();
    var v'addrMap6_5 = sc_13~load_dict();
    slice sc_14 = sc_13~load_ref().begin_parse();
    var v'addrMap6_6 = sc_14~load_dict();
    var v'addrMap6_7 = sc_14~load_dict();
    var v'addrMap7_1 = sc_14~load_dict();
    slice sc_15 = sc_14~load_ref().begin_parse();
    var v'addrMap7_2 = sc_15~load_dict();
    var v'addrMap7_3 = sc_15~load_dict();
    var v'addrMap7_4 = sc_15~load_dict();
    slice sc_16 = sc_15~load_ref().begin_parse();
    var v'addrMap7_5 = sc_16~load_dict();
    var v'addrMap7_6 = sc_16~load_dict();
    return (sc_0, (v'intMap1, v'intMap2, v'intMap3, v'intMap4, v'intMap5, v'intMap6_1, v'intMap6_2, v'intMap6_3, v'intMap6_4, v'intMap6_5, v'intMap6_6, v'intMap6_7, v'intMap7_1, v'intMap7_2, v'intMap7_3, v'intMap7_4, v'intMap7_5, v'intMap7_6, v'intMap8_1, v'intMap8_2, v'intMap8_3, v'intMap8_4, v'intMap8_5, v'intMap8_6, v'intMap8_7, v'intMap9_1, v'intMap9_2, v'intMap9_3, v'intMap9_4, v'intMap9_5, v'intMap9_6, v'addrMap1, v'addrMap2, v'addrMap3, v'addrMap4, v'addrMap5, v'addrMap6_1, v'addrMap6_2, v'addrMap6_3, v'addrMap6_4, v'addrMap6_5, v'addrMap6_6, v'addrMap6_7, v'addrMap7_1, v'addrMap7_2, v'addrMap7_3, v'addrMap7_4, v'addrMap7_5, v'addrMap7_6));
}

(cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) $MapTestContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MapTestContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $MapTestContract$_contract_init();
    }
}

() $MapTestContract$_contract_store((cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MapTestContract$_store(b, v);
    set_data(b.end_cell());
}