;;
;; Type: SomeGenericStruct
;; TLB: _ value1:int257 value2:int257 value3:int257 value4:int257 value5:int257 = SomeGenericStruct
;;

builder $SomeGenericStruct$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'value1, v'value2, v'value3, v'value4, v'value5) = v;
    build_0 = build_0.store_int(v'value1, 257);
    build_0 = build_0.store_int(v'value2, 257);
    build_0 = build_0.store_int(v'value3, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'value4, 257);
    build_1 = build_1.store_int(v'value5, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, int, int))) $SomeGenericStruct$_load(slice sc_0) inline {
    var v'value1 = sc_0~load_int(257);
    var v'value2 = sc_0~load_int(257);
    var v'value3 = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'value4 = sc_1~load_int(257);
    var v'value5 = sc_1~load_int(257);
    return (sc_0, (v'value1, v'value2, v'value3, v'value4, v'value5));
}

((int, int, int, int, int)) $SomeGenericStruct$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'value1, int vvv'value2, int vvv'value3, int vvv'value4, int vvv'value5) = __tact_tuple_destroy_5(v);
    return (vvv'value1, vvv'value2, vvv'value3, vvv'value4, vvv'value5);
}

tuple $SomeGenericStruct$_as_optional((int, int, int, int, int) v) inline {
    var (v'value1, v'value2, v'value3, v'value4, v'value5) = v;
    return __tact_tuple_create_5(v'value1, v'value2, v'value3, v'value4, v'value5);
}

tuple $SomeGenericStruct$_to_tuple(((int, int, int, int, int)) v) inline {
    var (v'value1, v'value2, v'value3, v'value4, v'value5) = v;
    return __tact_tuple_create_5(v'value1, v'value2, v'value3, v'value4, v'value5);
}

tuple $SomeGenericStruct$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $SomeGenericStruct$_to_tuple($SomeGenericStruct$_not_null(v)); 
}

(int, int, int, int, int) $SomeGenericStruct$_to_external(((int, int, int, int, int)) v) inline {
    var (v'value1, v'value2, v'value3, v'value4, v'value5) = v; 
    return (v'value1, v'value2, v'value3, v'value4, v'value5);
}

tuple $SomeGenericStruct$_to_opt_external(tuple v) inline {
    var loaded = $SomeGenericStruct$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int, int, int)) $SomeGenericStruct$_constructor_value1_value2_value3_value4_value5(int value1, int value2, int value3, int value4, int value5) inline {
    return (value1, value2, value3, value4, value5);
}

;;
;; Type: StructWithOptionals
;; TLB: _ a:Maybe int257 b:Maybe bool c:Maybe ^cell d:Maybe address e:Maybe SomeGenericStruct{value1:int257,value2:int257,value3:int257,value4:int257,value5:int257} = StructWithOptionals
;;

builder $StructWithOptionals$_store(builder build_0, (int, int, cell, slice, tuple) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    build_0 = ~ null?(v'a) ? build_0.store_int(true, 1).store_int(v'a, 257) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'b) ? build_0.store_int(true, 1).store_int(v'b, 1) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'c) ? build_0.store_int(true, 1).store_ref(v'c) : build_0.store_int(false, 1);
    build_0 = __tact_store_address_opt(build_0, v'd);
    var build_1 = begin_cell();
    build_1 = ~ null?(v'e) ? build_1.store_int(true, 1).$SomeGenericStruct$_store($SomeGenericStruct$_not_null(v'e)) : build_1.store_int(false, 1);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, slice, tuple))) $StructWithOptionals$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'b = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'c = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'd = sc_0~__tact_load_address_opt();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'e = sc_1~load_int(1) ? $SomeGenericStruct$_as_optional(sc_1~$SomeGenericStruct$_load()) : null();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e));
}

tuple $StructWithOptionals$_as_optional((int, int, cell, slice, tuple) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    return __tact_tuple_create_5(v'a, v'b, v'c, v'd, v'e);
}

((int, int, cell, slice, tuple)) $StructWithOptionals$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'a, int vvv'b, cell vvv'c, slice vvv'd, tuple vvv'e) = __tact_tuple_destroy_5(v);
    return (vvv'a, vvv'b, vvv'c, vvv'd, vvv'e);
}

tuple $StructWithOptionals$_to_tuple(((int, int, cell, slice, tuple)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    return __tact_tuple_create_5(v'a, v'b, v'c, v'd, $SomeGenericStruct$_to_opt_tuple(v'e));
}

tuple $StructWithOptionals$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $StructWithOptionals$_to_tuple($StructWithOptionals$_not_null(v)); 
}

(int, int, cell, slice, tuple) $StructWithOptionals$_to_external(((int, int, cell, slice, tuple)) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v; 
    return (v'a, v'b, v'c, v'd, $SomeGenericStruct$_to_opt_tuple(v'e));
}

tuple $StructWithOptionals$_to_opt_external(tuple v) inline {
    var loaded = $StructWithOptionals$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

;;
;; Type: Update
;; Header: 0x1554fcfd
;; TLB: update#1554fcfd a:Maybe int257 b:Maybe bool c:Maybe ^cell d:Maybe address e:Maybe SomeGenericStruct{value1:int257,value2:int257,value3:int257,value4:int257,value5:int257} f:Maybe StructWithOptionals{a:Maybe int257,b:Maybe bool,c:Maybe ^cell,d:Maybe address,e:Maybe SomeGenericStruct{value1:int257,value2:int257,value3:int257,value4:int257,value5:int257}} = Update
;;

(slice, ((int, int, cell, slice, tuple, tuple))) $Update$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 357891325);
    var v'a = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'b = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'c = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'd = sc_0~__tact_load_address_opt();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'e = sc_1~load_int(1) ? $SomeGenericStruct$_as_optional(sc_1~$SomeGenericStruct$_load()) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'f = sc_2~load_int(1) ? $StructWithOptionals$_as_optional(sc_2~$StructWithOptionals$_load()) : null();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}

;;
;; Type: ContractWithOptionals
;;

builder $ContractWithOptionals$_store(builder build_0, (int, int, cell, slice, tuple, tuple) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f) = v;
    build_0 = ~ null?(v'a) ? build_0.store_int(true, 1).store_int(v'a, 257) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'b) ? build_0.store_int(true, 1).store_int(v'b, 1) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'c) ? build_0.store_int(true, 1).store_ref(v'c) : build_0.store_int(false, 1);
    build_0 = __tact_store_address_opt(build_0, v'd);
    var build_1 = begin_cell();
    build_1 = ~ null?(v'e) ? build_1.store_int(true, 1).$SomeGenericStruct$_store($SomeGenericStruct$_not_null(v'e)) : build_1.store_int(false, 1);
    var build_2 = begin_cell();
    build_2 = ~ null?(v'f) ? build_2.store_int(true, 1).$StructWithOptionals$_store($StructWithOptionals$_not_null(v'f)) : build_2.store_int(false, 1);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, slice, tuple, tuple))) $ContractWithOptionals$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'b = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'c = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'd = sc_0~__tact_load_address_opt();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'e = sc_1~load_int(1) ? $SomeGenericStruct$_as_optional(sc_1~$SomeGenericStruct$_load()) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'f = sc_2~load_int(1) ? $StructWithOptionals$_as_optional(sc_2~$StructWithOptionals$_load()) : null();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}

(slice, ((int, int, cell, slice, tuple, tuple))) $ContractWithOptionals$init$_load(slice sc_0) inline_ref {
    var v'a = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'b = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'c = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'd = sc_0~__tact_load_address_opt();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'e = sc_1~load_int(1) ? $SomeGenericStruct$_as_optional(sc_1~$SomeGenericStruct$_load()) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'f = sc_2~load_int(1) ? $StructWithOptionals$_as_optional(sc_2~$StructWithOptionals$_load()) : null();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}

(int, int, cell, slice, tuple, tuple) $ContractWithOptionals$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ContractWithOptionals$_load();
    } else {
        (int a, int b, cell c, slice d, tuple e, tuple f) = $sc~$ContractWithOptionals$init$_load();
        $sc.end_parse();
        return $ContractWithOptionals$_contract_init(a, b, c, d, e, f);
    }
}

() $ContractWithOptionals$_contract_store((int, int, cell, slice, tuple, tuple) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $ContractWithOptionals$_store(b, v);
    set_data(b.end_cell());
}