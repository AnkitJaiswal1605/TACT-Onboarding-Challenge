#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "masterchain-allow_MasterchainTester.headers.fc";
#include "masterchain-allow_MasterchainTester.stdlib.fc";
#include "masterchain-allow_MasterchainTester.storage.fc";

;;
;; Contract MasterchainTester functions
;;

tuple $MasterchainTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, slice) $MasterchainTester$_fun_createAddress(tuple $self, int $chain, int $hash) impure inline_ref {
    var ($self) = $self;
    return ($self, __tact_create_address($chain, $hash));
}

(tuple, slice) $MasterchainTester$_fun_parseAddress(tuple $self, slice $src) impure inline_ref {
    var ($self) = $self;
    return ($self, $src~__tact_load_address());
}

(tuple, int) $MasterchainTester$_fun_serializeAddress(tuple $self, slice $src) impure inline_ref {
    var ($self) = $self;
    return ($self, true);
}

(tuple, int) $MasterchainTester$_fun_handleStruct(tuple $self, (slice, slice) $src) impure inline_ref {
    var ($self) = $self;
    var (($src'address, $src'address2)) = $src;
    return ($self, true);
}

;;
;; Receivers of a Contract MasterchainTester
;;

(tuple, ()) $MasterchainTester$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

((tuple), ()) $MasterchainTester$_internal_binary_TestMessage(tuple $self, (slice, slice) $message) impure inline {
    var $self = $self;
    var ($message'address, $message'address2) = $message;
    return ($self, ());
}

;;
;; Get methods of a Contract MasterchainTester
;;

_ %createAddress(int $$chain, int $$hash) method_id(125712) {
    int $chain = $$chain;
    int $hash = $$hash;
    var self = $MasterchainTester$_contract_load();
    var res = self~$MasterchainTester$_fun_createAddress($chain, $hash);
    return res;
}

_ %parseAddress(slice $$src) method_id(102482) {
    slice $src = $$src;
    var self = $MasterchainTester$_contract_load();
    var res = self~$MasterchainTester$_fun_parseAddress($src);
    return res;
}

_ %serializeAddress(slice $$src) method_id(73429) {
    slice $src = __tact_verify_address($$src);
    var self = $MasterchainTester$_contract_load();
    var res = self~$MasterchainTester$_fun_serializeAddress($src);
    return res;
}

_ %handleStruct(tuple $$src) method_id(67662) {
    (slice, slice) $src = $TestMessage$_from_tuple($$src);
    var self = $MasterchainTester$_contract_load();
    var res = self~$MasterchainTester$_fun_handleStruct($src);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.any.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNsbMJGEX9o5azqnatfBDPyQAUazeyRw68pndojki88ws";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MasterchainTester
;;

(tuple, int) $MasterchainTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TestMessage message
    if (op == 3679600542) {
        var msg = in_msg~$TestMessage$_load();
        self~$MasterchainTester$_internal_binary_TestMessage(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            self~$MasterchainTester$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MasterchainTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$MasterchainTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MasterchainTester$_contract_store(self);
}
