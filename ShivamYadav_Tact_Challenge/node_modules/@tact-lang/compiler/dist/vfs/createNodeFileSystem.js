"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeFileSystem = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const mkdirp_1 = __importDefault(require("mkdirp"));
function createNodeFileSystem(root, readonly = true) {
    let normalizedRoot = path_1.default.normalize(root);
    if (!normalizedRoot.endsWith(path_1.default.sep)) {
        normalizedRoot += path_1.default.sep;
    }
    return {
        root: normalizedRoot,
        exists(filePath) {
            if (!filePath.startsWith(normalizedRoot)) {
                throw new Error(`Path '${filePath}' is outside of the root directory '${normalizedRoot}'`);
            }
            return fs_1.default.existsSync(filePath);
        },
        resolve(...filePath) {
            return path_1.default.normalize(path_1.default.resolve(normalizedRoot, ...filePath));
        },
        readFile(filePath) {
            if (!filePath.startsWith(normalizedRoot)) {
                throw new Error(`Path '${filePath}' is outside of the root directory '${normalizedRoot}'`);
            }
            return fs_1.default.readFileSync(filePath);
        },
        writeFile(filePath, content) {
            if (readonly) {
                throw new Error('File system is readonly');
            }
            if (!filePath.startsWith(normalizedRoot)) {
                throw new Error(`Path '${filePath}' is outside of the root directory '${normalizedRoot}'`);
            }
            mkdirp_1.default.sync(path_1.default.dirname(filePath));
            fs_1.default.writeFileSync(filePath, content);
        }
    };
}
exports.createNodeFileSystem = createNodeFileSystem;
