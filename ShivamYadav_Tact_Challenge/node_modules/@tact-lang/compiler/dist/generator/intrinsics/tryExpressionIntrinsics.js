"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryExpressionIntrinsics = void 0;
const resolveConstantValue_1 = require("../../types/resolveConstantValue");
const resolveExpression_1 = require("../../types/resolveExpression");
const writeConstant_1 = require("../writers/writeConstant");
function tryExpressionIntrinsics(exp, ctx) {
    // Calls instrinsics
    if (exp.kind === 'op_call') {
        let sourceType = (0, resolveExpression_1.getExpType)(ctx.ctx, exp.src);
        if (sourceType.kind === 'ref' && sourceType.name === 'String' && !sourceType.optional) {
            //
            // Handle String.asComment()
            //
            if (exp.args.length === 0 && exp.name === 'asComment') {
                let constString = null;
                // Try to resolve constant value
                try {
                    let res = (0, resolveConstantValue_1.resolveConstantValue)(sourceType, exp.src, ctx.ctx);
                    if (typeof res !== 'string') {
                        throw new Error('Expected string');
                    }
                    constString = res;
                }
                catch (e) {
                    // Ignore
                }
                // Render if constant
                if (constString !== null) {
                    let id = (0, writeConstant_1.writeComment)(constString, ctx);
                    ctx.used(id);
                    return `${id}()`;
                }
            }
        }
    }
    return null;
}
exports.tryExpressionIntrinsics = tryExpressionIntrinsics;
