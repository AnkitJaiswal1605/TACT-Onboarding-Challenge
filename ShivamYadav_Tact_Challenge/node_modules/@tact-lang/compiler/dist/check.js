"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check = void 0;
const features_1 = require("./config/features");
const context_1 = require("./context");
const stdlib_1 = __importDefault(require("./imports/stdlib"));
const main_1 = require("./main");
const precompile_1 = require("./pipeline/precompile");
function check(args) {
    // Create context
    let stdlib = (0, main_1.createVirtualFileSystem)('@stdlib/', stdlib_1.default);
    let ctx = new context_1.CompilerContext({ shared: {} });
    ctx = (0, features_1.featureEnable)(ctx, 'debug'); // Enable debug flag (does not affect type checking in practice)
    ctx = (0, features_1.featureEnable)(ctx, 'masterchain'); // Enable masterchain flag to avoid masterchain-specific errors
    ctx = (0, features_1.featureEnable)(ctx, 'external'); // Enable external messages flag to avoid external-specific errors
    // Execute check
    let items = [];
    try {
        (0, precompile_1.precompile)(ctx, args.project, stdlib, args.entrypoint);
    }
    catch (e) {
        if (e instanceof main_1.TactSourceError) {
            items.push({
                type: 'error',
                message: e.message,
                location: e.ref.file ? {
                    file: e.ref.file,
                    line: e.ref.interval.getLineAndColumn().lineNum,
                    column: e.ref.interval.getLineAndColumn().colNum,
                    length: e.ref.interval.endIdx - e.ref.interval.startIdx
                } : {
                    file: args.entrypoint,
                    line: 0,
                    column: 0,
                    length: 0
                }
            });
        }
        else {
            if (typeof e.message === 'string') {
                items.push({
                    type: 'error',
                    message: e.message,
                    location: {
                        file: args.entrypoint,
                        line: 0,
                        column: 0,
                        length: 0
                    }
                });
            }
            else {
                items.push({
                    type: 'error',
                    message: 'Unknown internal message',
                    location: {
                        file: args.entrypoint,
                        line: 0,
                        column: 0,
                        length: 0
                    }
                });
            }
        }
    }
    if (items.length > 0) {
        return {
            ok: false,
            messages: items
        };
    }
    return {
        ok: true
    };
}
exports.check = check;
