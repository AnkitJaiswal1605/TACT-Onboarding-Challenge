/// <reference types="bn.js" />
/// <reference types="node" />
import { BitString, Cell } from "..";
export declare class Slice {
    static fromCell(cell: Cell): Slice;
    private readonly sourceBits;
    private readonly bits;
    private readonly refs;
    private constructor();
    get remaining(): number;
    get remainingRefs(): number;
    skip: (bits: number) => void;
    readUint: (bits: number) => import("bn.js");
    readUintNumber: (bits: number) => number;
    readInt: (bits: number) => import("bn.js");
    readIntNumber: (bits: number) => number;
    readBuffer: (size: number) => Buffer;
    readBit: () => boolean;
    readCoins: () => import("bn.js");
    readVarUInt: (headerBits: number) => import("bn.js");
    readVarUIntNumber: (headerBits: number) => number;
    readRemaining: () => BitString;
    readRemainingBytes: () => Buffer;
    readAddress: () => import("..").Address | null;
    readUnaryLength: () => number;
    readOptDict: <T>(keySize: number, extractor: (slice: Slice) => T) => Map<string, T> | null;
    readDict: <T>(keySize: number, extractor: (slice: Slice) => T) => Map<string, T>;
    readRef: () => Slice;
    readCell: () => Cell;
    clone: () => Slice;
    toCell: () => Cell;
}
