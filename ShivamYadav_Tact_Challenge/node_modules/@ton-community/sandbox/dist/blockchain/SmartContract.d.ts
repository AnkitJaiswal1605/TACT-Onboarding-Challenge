/// <reference types="node" />
import { Blockchain } from "./Blockchain";
import { Address, Cell, Message, ShardAccount, Transaction, TupleItem, TupleReader } from "ton-core";
import { EmulationResult, RunCommonArgs, TickOrTock } from "../executor/Executor";
export declare function createShardAccount(args: {
    address?: Address;
    code: Cell;
    data: Cell;
    balance: bigint;
    workchain?: number;
}): ShardAccount;
export declare function createEmptyShardAccount(address: Address): ShardAccount;
export type Verbosity = 'none' | 'vm_logs' | 'vm_logs_location' | 'vm_logs_gas' | 'vm_logs_full' | 'vm_logs_verbose';
export type LogsVerbosity = {
    print: boolean;
    blockchainLogs: boolean;
    vmLogs: Verbosity;
    debugLogs: boolean;
};
export type SmartContractTransaction = Transaction & {
    blockchainLogs: string;
    vmLogs: string;
    debugLogs: string;
};
export type MessageParams = Partial<{
    now: number;
    randomSeed: Buffer;
    ignoreChksig: boolean;
}>;
export type GetMethodParams = Partial<{
    now: number;
    randomSeed: Buffer;
    gasLimit: bigint;
}>;
export type GetMethodResult = {
    stack: TupleItem[];
    stackReader: TupleReader;
    exitCode: number;
    gasUsed: bigint;
    blockchainLogs: string;
    vmLogs: string;
    debugLogs: string;
};
export declare class GetMethodError extends Error {
    exitCode: number;
    gasUsed: bigint;
    blockchainLogs: string;
    vmLogs: string;
    debugLogs: string;
    constructor(exitCode: number, gasUsed: bigint, blockchainLogs: string, vmLogs: string, debugLogs: string);
}
export declare class TimeError extends Error {
    address: Address;
    previousTxTime: number;
    currentTime: number;
    constructor(address: Address, previousTxTime: number, currentTime: number);
}
export type SmartContractSnapshot = {
    address: Address;
    account: ShardAccount;
    lastTxTime: number;
    verbosity?: Partial<LogsVerbosity>;
};
export declare class SmartContract {
    #private;
    readonly address: Address;
    readonly blockchain: Blockchain;
    constructor(shardAccount: ShardAccount, blockchain: Blockchain);
    snapshot(): SmartContractSnapshot;
    loadFrom(snapshot: SmartContractSnapshot): void;
    get balance(): bigint;
    set balance(v: bigint);
    get lastTransactionHash(): bigint;
    get lastTransactionLt(): bigint;
    get accountState(): import("ton-core").AccountState | undefined;
    get account(): ShardAccount;
    set account(account: ShardAccount);
    static create(blockchain: Blockchain, args: {
        address: Address;
        code: Cell;
        data: Cell;
        balance: bigint;
    }): SmartContract;
    static empty(blockchain: Blockchain, address: Address): SmartContract;
    protected createCommonArgs(params?: MessageParams): RunCommonArgs;
    receiveMessage(message: Message, params?: MessageParams): SmartContractTransaction;
    runTickTock(which: TickOrTock, params?: MessageParams): SmartContractTransaction;
    protected runCommon(run: () => EmulationResult): SmartContractTransaction;
    get(method: string | number, stack?: TupleItem[], params?: GetMethodParams): GetMethodResult;
    get verbosity(): LogsVerbosity;
    set verbosity(value: LogsVerbosity);
    setVerbosity(verbosity: Partial<LogsVerbosity> | Verbosity | undefined): void;
}
