"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.templateTypes = void 0;
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
const template_1 = require("../template");
const utils_1 = require("../utils");
const arg_1 = __importDefault(require("arg"));
const build_1 = require("./build");
function toSnakeCase(v) {
    const r = v.replace(/[A-Z]/g, (sub) => '_' + sub.toLowerCase());
    return r[0] === '_' ? r.substring(1) : r;
}
async function createFile(templatePath, realPath, replaces) {
    const template = (await (0, promises_1.readFile)(templatePath)).toString('utf-8');
    const lines = template.split('\n');
    const fileName = (0, template_1.executeTemplate)(lines.shift(), replaces);
    const contents = (0, template_1.executeTemplate)(lines.join('\n'), replaces);
    const p = path_1.default.join(realPath, fileName);
    const file = await (0, promises_1.open)(p, 'a+');
    if ((await file.stat()).size > 0) {
        console.warn(`${p} already exists, not changing.`);
        await file.close();
        return;
    }
    await file.writeFile(contents);
    await file.close();
}
async function createFiles(templatePath, realPath, replaces) {
    const contents = await (0, promises_1.readdir)(templatePath);
    for (const file of contents) {
        const tp = path_1.default.join(templatePath, file);
        const rp = path_1.default.join(realPath, file);
        if ((await (0, promises_1.lstat)(tp)).isDirectory()) {
            await createFiles(tp, rp, replaces);
        }
        else {
            await (0, promises_1.mkdir)(path_1.default.dirname(rp), {
                recursive: true,
            });
            await createFile(tp, realPath, replaces);
        }
    }
}
exports.templateTypes = [
    {
        name: 'An empty contract (FunC)',
        value: 'func-empty',
    },
    {
        name: 'A simple counter contract (FunC)',
        value: 'func-counter',
    },
    {
        name: 'An empty contract (TACT)',
        value: 'tact-empty',
    },
    {
        name: 'A simple counter contract (TACT)',
        value: 'tact-counter',
    },
];
const create = async (args, ui) => {
    const localArgs = (0, arg_1.default)({
        '--type': String,
    });
    const name = args._.length > 1 && args._[1].trim().length > 0
        ? args._[1].trim()
        : await ui.input('Contract name (PascalCase)');
    if (name.length === 0)
        throw new Error(`Cannot create a contract with an empty name`);
    if (name.toLowerCase() === 'contract' || !/^[A-Z][a-zA-Z0-9]*$/.test(name))
        throw new Error(`Cannot create a contract with the name '${name}'`);
    const which = (await (0, utils_1.selectOption)(exports.templateTypes, {
        ui,
        msg: 'What type of contract do you want to create?',
        hint: localArgs['--type'],
    })).value;
    const [lang, template] = which.split('-');
    const snakeName = toSnakeCase(name);
    const replaces = {
        name,
        loweredName: name.substring(0, 1).toLowerCase() + name.substring(1),
        snakeName,
        contractPath: 'contracts/' + snakeName + '.' + (lang === 'func' ? 'fc' : 'tact'),
    };
    await createFiles(path_1.default.join(template_1.TEMPLATES_DIR, lang, 'common'), process.cwd(), replaces);
    await createFiles(path_1.default.join(template_1.TEMPLATES_DIR, lang, template), process.cwd(), replaces);
    if (lang === 'tact') {
        await (0, build_1.buildOne)(name, ui);
    }
};
exports.create = create;
