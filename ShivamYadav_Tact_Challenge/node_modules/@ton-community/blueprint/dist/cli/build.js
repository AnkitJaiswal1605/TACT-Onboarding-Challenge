"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = exports.buildOne = void 0;
const path_1 = __importDefault(require("path"));
const paths_1 = require("../paths");
const utils_1 = require("../utils");
const promises_1 = __importDefault(require("fs/promises"));
const compile_1 = require("../compile/compile");
const arg_1 = __importDefault(require("arg"));
async function buildOne(contract, ui) {
    ui.write(`Build script running, compiling ${contract}\n`);
    const buildArtifactPath = path_1.default.join(paths_1.BUILD_DIR, `${contract}.compiled.json`);
    try {
        await promises_1.default.unlink(buildArtifactPath);
    }
    catch (e) { }
    ui.write('⏳ Compiling...\n');
    try {
        const result = await (0, compile_1.doCompile)(contract);
        if (result.lang === 'tact') {
            for (const [k, v] of result.fs) {
                await promises_1.default.mkdir(path_1.default.dirname(k), {
                    recursive: true,
                });
                await promises_1.default.writeFile(k, v);
            }
        }
        const cell = result.code;
        ui.write('✅ Compiled successfully! Cell BOC hex result:\n\n');
        ui.write(cell.toBoc().toString('hex'));
        await promises_1.default.mkdir(paths_1.BUILD_DIR, { recursive: true });
        await promises_1.default.writeFile(buildArtifactPath, JSON.stringify({
            hex: cell.toBoc().toString('hex'),
        }));
        ui.write(`\n✅ Wrote compilation artifact to ${path_1.default.relative(process.cwd(), buildArtifactPath)}`);
    }
    catch (e) {
        ui.write(e.toString());
        process.exit(1);
    }
}
exports.buildOne = buildOne;
const build = async (args, ui) => {
    require('ts-node/register');
    const localArgs = (0, arg_1.default)({
        '--all': Boolean,
    });
    const files = await (0, utils_1.findCompiles)();
    if (localArgs['--all']) {
        for (const file of files) {
            await buildOne(file.name, ui);
        }
    }
    else {
        const sel = await (0, utils_1.selectFile)(files, {
            ui,
            hint: args._.length > 1 && args._[1].length > 0 ? args._[1] : undefined,
            import: false,
        });
        await buildOne(sel.name, ui);
    }
};
exports.build = build;
