import { AccountStatus, Address, Cell, Transaction } from "ton-core";
import { CompareResult } from "./interface";
export type FlatTransaction = {
    from?: Address;
    to: Address;
    on: Address;
    value?: bigint;
    body: Cell;
    inMessageBounced?: boolean;
    inMessageBounceable?: boolean;
    op?: number;
    initData?: Cell;
    initCode?: Cell;
    deploy: boolean;
    lt: bigint;
    now: number;
    outMessagesCount: number;
    oldStatus: AccountStatus;
    endStatus: AccountStatus;
    totalFees?: bigint;
    aborted?: boolean;
    destroyed?: boolean;
    exitCode?: number;
    actionResultCode?: number;
    success?: boolean;
};
type WithFunctions<T> = {
    [K in keyof T]: T[K] | ((x: T[K]) => boolean);
};
export type FlatTransactionComparable = Partial<WithFunctions<FlatTransaction>>;
export declare function flattenTransaction(tx: Transaction): FlatTransaction;
export declare function compareTransaction(tx: FlatTransaction, cmp: FlatTransactionComparable): boolean;
export declare function compareTransactionForTest(subject: any, cmp: FlatTransactionComparable): CompareResult;
export {};
