;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: A
;;

tuple $A$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $A$_contract_init();
    }
}

() $A$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;;
;; Type: B
;;

builder $B$init$_store(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(cell, cell) $B$_init_child(cell sys', slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: B
    cell mine = __tact_dict_get_code(source, 26758);
    contracts = __tact_dict_set_code(contracts, 26758, mine);
    
    ;; Contract Code: C
    cell code_30887 = __tact_dict_get_code(source, 30887);
    contracts = __tact_dict_set_code(contracts, 30887, code_30887);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $B$init$_store(b, ($parent));
    return (mine, b.end_cell());
}