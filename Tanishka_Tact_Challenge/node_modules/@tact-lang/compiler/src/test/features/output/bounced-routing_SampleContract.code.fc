#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "bounced-routing_SampleContract.headers.fc";
#include "bounced-routing_SampleContract.stdlib.fc";
#include "bounced-routing_SampleContract.constants.fc";
#include "bounced-routing_SampleContract.storage.fc";

;;
;; Contract SampleContract functions
;;

(int) $SampleContract$_contract_init() impure inline_ref {
    var (($self'a)) = (null());
    $self'a = 100;
    return ($self'a);
}

((int), int) $SampleContract$_fun_amount((int) $self) impure inline_ref {
    var (($self'a)) = $self;
    return (($self'a), $self'a);
}

;;
;; Receivers of a Contract SampleContract
;;

(((int)), ()) %$SampleContract$_internal_empty((int) $self) impure inline {
    var ($self'a) = $self;
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_internal_binary_EntryFirst((int) $self, (int, slice) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amountToAdd, $msg'toAddress) = $msg;
    $self'a = ($self'a - $msg'amountToAdd);
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'toAddress, 1000000000, 2, true, $First$_store_cell($First$_constructor_amount_myCoins_myBool3_anAddress($msg'amountToAdd, 3, false, __tact_context_get_sender()))));
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_internal_binary_EntrySecond((int) $self, (int, slice) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amountToAdd, $msg'toAddress) = $msg;
    $self'a = ($self'a - $msg'amountToAdd);
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'toAddress, 1000000000, 2, true, $Second$_store_cell($Second$_constructor_amount_bigger_myBool_thisDoesNotFit_myAddress_myBool2_myStruct_myStruct2($msg'amountToAdd, false, 1, __tact_context_get_sender(), false, $MyStruct$_constructor_amount(1), $MyStruct$_constructor_amount(2)))));
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_internal_binary_First((int) $self, (int, int, int, slice) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amount, $msg'myCoins, $msg'myBool3, $msg'anAddress) = $msg;
    var ($x'amount, $x'myCoins, $x'myBool3, $x'anAddress) = ($msg'amount, $msg'myCoins, $msg'myBool3, $msg'anAddress);
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_internal_binary_Second((int) $self, (int, int, int, slice, int, (int), (int)) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amount_bigger, $msg'myBool, $msg'thisDoesNotFit, $msg'myAddress, $msg'myBool2, ($msg'myStruct'amount), ($msg'myStruct2'amount)) = $msg;
    return (($self'a), ());
}

((int), ()) $SampleContract$_internal_text_cdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4((int) $self) impure inline {
    var ($self'a) = $self;
    return (($self'a), ());
}

((int), ()) $SampleContract$_receive_bounce((int) $self, slice $msg) impure inline {
    var ($self'a) = $self;
    __tact_debug_str(__gen_slice_string_e00443a4d0500a8f08cfafd55e0ef63f7446ab298ff5fa2e86e8c14fb1c93308());
    int $y = $msg~load_uint(32);
    $self'a = 77;
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_receive_binary_bounce_First((int) $self, (int, int, int) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amount, $msg'myCoins, $msg'myBool3) = $msg;
    __tact_debug_str(__gen_slice_string_243957683affad975f13b5d1da712eeeb40eaaafd138959df55425441c233292());
    int $y = $msg'myBool3;
    $self'a = (($self'a + $msg'amount) - 2);
    (int, int, int) $z = ($msg'amount, $msg'myCoins, $msg'myBool3);
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_receive_binary_bounce_Second((int) $self, (int, int) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amount_bigger, $msg'myBool) = $msg;
    __tact_debug_str(__gen_slice_string_5060db2d197fc52630815539c065a7d8c266f871c8b16b933b89d4fe90a72fae());
    $self'a = (($self'a + $msg'amount_bigger) - 4);
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_receive_binary_bounce_SmallBounce((int) $self, (int, int) $msg) impure inline {
    var ($self'a) = $self;
    var ($msg'amount, $msg'myBool3) = $msg;
    __tact_debug_str(__gen_slice_string_f115c865d815c88dfb8375de4bb989003f2730d837bf69e92fac8747a1cdcb3f());
    $self'a = (($self'a + $msg'amount) - 4);
    return (($self'a), ());
}

(((int)), ()) $SampleContract$_receive_binary_bounce_Large((int) $self, tuple $msg) impure inline {
    var ($self'a) = $self;
    var $msg = $msg;
    __tact_debug_str(__gen_slice_string_072acac8f7f333d9554b76e61e6f7a869815335882336469afd2cfdcdb31e988());
    return (($self'a), ());
}

;;
;; Get methods of a Contract SampleContract
;;

_ %amount() method_id(101100) {
    var self = $SampleContract$_contract_load();
    var res = self~$SampleContract$_fun_amount();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbyKdmUn91HMnFzbpndVC9nhM3FkVTR6bKfnRftvHW7Nb";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleContract
;;

((int), int) $SampleContract$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        
        ;; Bounced handler for First message
        if (op == 3200290616) {
            var msg = in_msg~$First$_load_bounced();
            self~$SampleContract$_receive_binary_bounce_First(msg);
            return (self, true);
        }
        
        ;; Bounced handler for Second message
        if (op == 391585480) {
            var msg = in_msg~$Second$_load_bounced();
            self~$SampleContract$_receive_binary_bounce_Second(msg);
            return (self, true);
        }
        
        ;; Bounced handler for SmallBounce message
        if (op == 3235833558) {
            var msg = in_msg~$SmallBounce$_load();
            self~$SampleContract$_receive_binary_bounce_SmallBounce(msg);
            return (self, true);
        }
        
        ;; Bounced handler for Large message
        if (op == 618480963) {
            var msg = in_msg~$Large$_load_bounced();
            self~$SampleContract$_receive_binary_bounce_Large(msg);
            return (self, true);
        }
        
        ;; Fallback bounce receiver
        self~$SampleContract$_receive_bounce(in_msg);
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$SampleContract$_internal_empty();
        return (self, true);
    }
    
    ;; Receive EntryFirst message
    if (op == 2757457064) {
        var msg = in_msg~$EntryFirst$_load();
        self~$SampleContract$_internal_binary_EntryFirst(msg);
        return (self, true);
    }
    
    ;; Receive EntrySecond message
    if (op == 4282440720) {
        var msg = in_msg~$EntrySecond$_load();
        self~$SampleContract$_internal_binary_EntrySecond(msg);
        return (self, true);
    }
    
    ;; Receive First message
    if (op == 3200290616) {
        var msg = in_msg~$First$_load();
        self~$SampleContract$_internal_binary_First(msg);
        return (self, true);
    }
    
    ;; Receive Second message
    if (op == 391585480) {
        var msg = in_msg~$Second$_load();
        self~$SampleContract$_internal_binary_Second(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Increment" message
        if (text_op == 0xcdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4) {
            self~$SampleContract$_internal_text_cdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleContract$_contract_store(self);
}
