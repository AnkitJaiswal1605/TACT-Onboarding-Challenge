#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "constants_ConstantTester.headers.fc";
#include "constants_ConstantTester.stdlib.fc";
#include "constants_ConstantTester.constants.fc";
#include "constants_ConstantTester.storage.fc";

;;
;; Contract ConstantTester functions
;;

tuple $ConstantTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, int) $ConstantTester$_fun_something1(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 11);
}

(tuple, int) $ConstantTester$_fun_something2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, null());
}

(tuple, int) $ConstantTester$_fun_something3(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 123000000000);
}

(tuple, int) $ConstantTester$_fun_something4(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 456000000000);
}

(tuple, slice) $ConstantTester$_fun_something5(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, __gen_slice_string_be033138a8e284b3da1cee56e92447de2368f6431d64a3c6fe4db3183aeb9c36());
}

(tuple, int) $ConstantTester$_fun_something6(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 10);
}

(tuple, int) $ConstantTester$_fun_something7(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 5);
}

(tuple, int) $ConstantTester$_fun_something8(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 4);
}

(tuple, int) $ConstantTester$_fun_globalConst(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 100);
}

;;
;; Receivers of a Contract ConstantTester
;;

;;
;; Get methods of a Contract ConstantTester
;;

_ %something1() method_id(121234) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something1();
    return res;
}

_ %something2() method_id(125425) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something2();
    return res;
}

_ %something3() method_id(129488) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something3();
    return res;
}

_ %something4() method_id(100663) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something4();
    return res;
}

_ %something5() method_id(104726) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something5();
    return res;
}

_ %something6() method_id(108917) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something6();
    return res;
}

_ %something7() method_id(112980) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something7();
    return res;
}

_ %something8() method_id(84155) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_something8();
    return res;
}

_ %globalConst() method_id(116577) {
    var self = $ConstantTester$_contract_load();
    var res = self~$ConstantTester$_fun_globalConst();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmcrn5woTzAg5cHev4LCjtg5Lfwq7zhkE1AAr3FLmbk853";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract ConstantTester
;;

(tuple, int) $ConstantTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $ConstantTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$ConstantTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $ConstantTester$_contract_store(self);
}
