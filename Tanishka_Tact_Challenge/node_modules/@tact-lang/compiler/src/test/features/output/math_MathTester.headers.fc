;;
;; Header files for MathTester
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_eq_bits_nullable_one
int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline;

;; __tact_slice_eq_bits_nullable
int __tact_slice_eq_bits_nullable(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; __tact_int_neq_nullable_one
int __tact_int_neq_nullable_one(int a, int b) inline;

;; __tact_int_eq_nullable
int __tact_int_eq_nullable(int a, int b) inline;

;; __tact_int_neq_nullable
int __tact_int_neq_nullable(int a, int b) inline;

;; __tact_cell_eq
int __tact_cell_eq(cell a, cell b) inline;

;; __tact_cell_neq
int __tact_cell_neq(cell a, cell b) inline;

;; __tact_cell_eq_nullable_one
int __tact_cell_eq_nullable_one(cell a, cell b) inline;

;; __tact_cell_neq_nullable_one
int __tact_cell_neq_nullable_one(cell a, cell b) inline;

;; __tact_cell_eq_nullable
int __tact_cell_eq_nullable(cell a, cell b) inline;

;; __tact_cell_neq_nullable
int __tact_cell_neq_nullable(cell a, cell b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $MathTester$_contract_init
tuple $MathTester$_contract_init() impure inline_ref;

;; $MathTester$_contract_load
tuple $MathTester$_contract_load() impure inline_ref;

;; $MathTester$_contract_store
() $MathTester$_contract_store(tuple v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $MathTester$_fun_add
(tuple, int) $MathTester$_fun_add(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_sub
(tuple, int) $MathTester$_fun_sub(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_mul
(tuple, int) $MathTester$_fun_mul(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_div
(tuple, int) $MathTester$_fun_div(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_mod
(tuple, int) $MathTester$_fun_mod(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_shr
(tuple, int) $MathTester$_fun_shr(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_shl
(tuple, int) $MathTester$_fun_shl(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_and
(tuple, int) $MathTester$_fun_and(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_or
(tuple, int) $MathTester$_fun_or(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare1
(tuple, int) $MathTester$_fun_compare1(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare2
(tuple, int) $MathTester$_fun_compare2(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare3
(tuple, int) $MathTester$_fun_compare3(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare4
(tuple, int) $MathTester$_fun_compare4(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare5
(tuple, int) $MathTester$_fun_compare5(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare6
(tuple, int) $MathTester$_fun_compare6(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare7
(tuple, int) $MathTester$_fun_compare7(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare8
(tuple, int) $MathTester$_fun_compare8(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare9
(tuple, int) $MathTester$_fun_compare9(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare10
(tuple, int) $MathTester$_fun_compare10(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare11
(tuple, int) $MathTester$_fun_compare11(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare12
(tuple, int) $MathTester$_fun_compare12(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare13
(tuple, int) $MathTester$_fun_compare13(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare14
(tuple, int) $MathTester$_fun_compare14(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare15
(tuple, int) $MathTester$_fun_compare15(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare16
(tuple, int) $MathTester$_fun_compare16(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare17
(tuple, int) $MathTester$_fun_compare17(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare18
(tuple, int) $MathTester$_fun_compare18(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare19
(tuple, int) $MathTester$_fun_compare19(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare20
(tuple, int) $MathTester$_fun_compare20(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare21
(tuple, int) $MathTester$_fun_compare21(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare22
(tuple, int) $MathTester$_fun_compare22(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare23
(tuple, int) $MathTester$_fun_compare23(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare24
(tuple, int) $MathTester$_fun_compare24(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare25
(tuple, int) $MathTester$_fun_compare25(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare26
(tuple, int) $MathTester$_fun_compare26(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare27
(tuple, int) $MathTester$_fun_compare27(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare28
(tuple, int) $MathTester$_fun_compare28(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_isNull1
(tuple, int) $MathTester$_fun_isNull1(tuple $self, int $a) impure inline_ref;

;; $MathTester$_fun_isNotNull1
(tuple, int) $MathTester$_fun_isNotNull1(tuple $self, int $a) impure inline_ref;

;; $MathTester$_fun_isNull2
(tuple, int) $MathTester$_fun_isNull2(tuple $self, slice $address) impure inline_ref;

;; $MathTester$_fun_isNotNull2
(tuple, int) $MathTester$_fun_isNotNull2(tuple $self, slice $address) impure inline_ref;

;; $MathTester$_fun_isNull3
(tuple, int) $MathTester$_fun_isNull3(tuple $self, cell $cell) impure inline_ref;

;; $MathTester$_fun_isNotNull3
(tuple, int) $MathTester$_fun_isNotNull3(tuple $self, cell $cell) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $MathTester$_fun_forward
(tuple, ()) $MathTester$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $MathTester$_fun_notify
(tuple, ()) $MathTester$_fun_notify(tuple $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
