"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MnemonicProvider_wallet, _MnemonicProvider_secretKey, _MnemonicProvider_client, _MnemonicProvider_ui;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MnemonicProvider = void 0;
const ton_1 = require("ton");
const ton_core_1 = require("ton-core");
const ton_crypto_1 = require("ton-crypto");
const wallets = {
    v1r1: ton_1.WalletContractV1R1,
    v1r2: ton_1.WalletContractV1R2,
    v1r3: ton_1.WalletContractV1R3,
    v2r1: ton_1.WalletContractV2R1,
    v2r2: ton_1.WalletContractV2R2,
    v3r1: ton_1.WalletContractV3R1,
    v3r2: ton_1.WalletContractV3R2,
    v4: ton_1.WalletContractV4,
};
class MnemonicProvider {
    constructor(params) {
        _MnemonicProvider_wallet.set(this, void 0);
        _MnemonicProvider_secretKey.set(this, void 0);
        _MnemonicProvider_client.set(this, void 0);
        _MnemonicProvider_ui.set(this, void 0);
        if (!(params.version in wallets)) {
            throw new Error(`Unknown wallet version ${params.version}`);
        }
        const kp = (0, ton_crypto_1.keyPairFromSecretKey)(params.secretKey);
        __classPrivateFieldSet(this, _MnemonicProvider_client, params.client, "f");
        __classPrivateFieldSet(this, _MnemonicProvider_wallet, (0, ton_core_1.openContract)(wallets[params.version].create({
            workchain: params.workchain ?? 0,
            publicKey: kp.publicKey,
        }), (params) => __classPrivateFieldGet(this, _MnemonicProvider_client, "f").provider(params.address, params.init)), "f");
        __classPrivateFieldSet(this, _MnemonicProvider_secretKey, kp.secretKey, "f");
        __classPrivateFieldSet(this, _MnemonicProvider_ui, params.ui, "f");
    }
    async connect() {
        __classPrivateFieldGet(this, _MnemonicProvider_ui, "f").write(`Connected to wallet at address: ${this.address()}\n`);
    }
    async sendTransaction(address, amount, payload, stateInit) {
        await __classPrivateFieldGet(this, _MnemonicProvider_wallet, "f").sendTransfer({
            seqno: await __classPrivateFieldGet(this, _MnemonicProvider_wallet, "f").getSeqno(),
            secretKey: __classPrivateFieldGet(this, _MnemonicProvider_secretKey, "f"),
            messages: [
                {
                    init: stateInit,
                    body: payload ?? new ton_core_1.Cell(),
                    info: {
                        type: 'internal',
                        ihrDisabled: true,
                        ihrFee: 0n,
                        bounce: true,
                        bounced: false,
                        dest: address,
                        value: { coins: amount },
                        forwardFee: 0n,
                        createdAt: 0,
                        createdLt: 0n,
                    },
                },
            ],
        });
        __classPrivateFieldGet(this, _MnemonicProvider_ui, "f").write('Sent transaction');
    }
    address() {
        return __classPrivateFieldGet(this, _MnemonicProvider_wallet, "f").address;
    }
}
exports.MnemonicProvider = MnemonicProvider;
_MnemonicProvider_wallet = new WeakMap(), _MnemonicProvider_secretKey = new WeakMap(), _MnemonicProvider_client = new WeakMap(), _MnemonicProvider_ui = new WeakMap();
