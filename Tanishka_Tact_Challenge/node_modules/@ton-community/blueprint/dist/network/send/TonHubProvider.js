"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TonHubProvider_connector, _TonHubProvider_storage, _TonHubProvider_ui, _TonHubProvider_session;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonHubProvider = void 0;
const ton_core_1 = require("ton-core");
const ton_x_1 = require("ton-x");
const qrcode_terminal_1 = __importDefault(require("qrcode-terminal"));
const KEY_NAME = 'tonhub_session';
class TonHubProvider {
    constructor(network, storage, ui) {
        _TonHubProvider_connector.set(this, void 0);
        _TonHubProvider_storage.set(this, void 0);
        _TonHubProvider_ui.set(this, void 0);
        _TonHubProvider_session.set(this, void 0);
        __classPrivateFieldSet(this, _TonHubProvider_connector, new ton_x_1.TonhubConnector({
            network,
        }), "f");
        __classPrivateFieldSet(this, _TonHubProvider_storage, storage, "f");
        __classPrivateFieldSet(this, _TonHubProvider_ui, ui, "f");
    }
    async getExistingSession() {
        const sessionString = await __classPrivateFieldGet(this, _TonHubProvider_storage, "f").getItem(KEY_NAME);
        if (sessionString === null)
            return undefined;
        let session = JSON.parse(sessionString);
        const state = await __classPrivateFieldGet(this, _TonHubProvider_connector, "f").getSessionState(session.id);
        if (state.state === 'ready') {
            session = {
                ...state,
                id: session.id,
                seed: session.seed,
            };
            await __classPrivateFieldGet(this, _TonHubProvider_storage, "f").setItem(KEY_NAME, JSON.stringify(session));
            return session;
        }
    }
    async getSession() {
        const existing = await this.getExistingSession();
        if (existing !== undefined)
            return existing;
        const createdSession = await __classPrivateFieldGet(this, _TonHubProvider_connector, "f").createNewSession({
            name: 'TON template project',
            url: 'https://example.com/',
        });
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").setActionPrompt('Connecting to wallet...\n');
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").write('\n');
        qrcode_terminal_1.default.generate(createdSession.link, { small: true }, (qr) => __classPrivateFieldGet(this, _TonHubProvider_ui, "f").write(qr));
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").write('\n' + createdSession.link + '\n\n');
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").setActionPrompt('Scan the QR code in your wallet or open the link...');
        const state = await __classPrivateFieldGet(this, _TonHubProvider_connector, "f").awaitSessionReady(createdSession.id, 5 * 60 * 1000);
        if (state.state === 'ready') {
            const session = {
                ...state,
                id: createdSession.id,
                seed: createdSession.seed,
            };
            await __classPrivateFieldGet(this, _TonHubProvider_storage, "f").setItem(KEY_NAME, JSON.stringify(session));
            return session;
        }
        throw new Error('Could not create new session');
    }
    async connect() {
        __classPrivateFieldSet(this, _TonHubProvider_session, await this.getSession(), "f");
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").write(`Connected to wallet at address: ${ton_core_1.Address.parse(__classPrivateFieldGet(this, _TonHubProvider_session, "f").wallet.address).toString()}\n`);
    }
    address() {
        if (!__classPrivateFieldGet(this, _TonHubProvider_session, "f"))
            return undefined;
        return ton_core_1.Address.parse(__classPrivateFieldGet(this, _TonHubProvider_session, "f").wallet.address);
    }
    async sendTransaction(address, amount, payload, stateInit) {
        if (!__classPrivateFieldGet(this, _TonHubProvider_session, "f"))
            throw new Error('TonhubProvider is not connected');
        const request = {
            seed: __classPrivateFieldGet(this, _TonHubProvider_session, "f").seed,
            appPublicKey: __classPrivateFieldGet(this, _TonHubProvider_session, "f").wallet.appPublicKey,
            to: address.toString(),
            value: amount.toString(),
            timeout: 5 * 60 * 1000,
            payload: payload ? payload.toBoc().toString('base64') : undefined,
            stateInit: stateInit
                ? (0, ton_core_1.beginCell)().storeWritable((0, ton_core_1.storeStateInit)(stateInit)).endCell().toBoc().toString('base64')
                : undefined,
        };
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").setActionPrompt('Sending transaction. Approve it in your wallet...');
        const response = await __classPrivateFieldGet(this, _TonHubProvider_connector, "f").requestTransaction(request);
        if (response.type !== 'success') {
            throw new Error(`Tonhub transaction request was not successful (${response.type})`);
        }
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").clearActionPrompt();
        __classPrivateFieldGet(this, _TonHubProvider_ui, "f").write('Sent transaction');
        return response;
    }
}
exports.TonHubProvider = TonHubProvider;
_TonHubProvider_connector = new WeakMap(), _TonHubProvider_storage = new WeakMap(), _TonHubProvider_ui = new WeakMap(), _TonHubProvider_session = new WeakMap();
