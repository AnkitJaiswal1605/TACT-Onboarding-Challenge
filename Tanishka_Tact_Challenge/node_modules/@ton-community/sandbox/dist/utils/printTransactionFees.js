"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTransactionFees = exports.formatCoinsPure = void 0;
const decimalCount = 9;
const decimal = pow10(decimalCount);
function pow10(n) {
    let v = 1n;
    for (let i = 0; i < n; i++) {
        v *= 10n;
    }
    return v;
}
function formatCoinsPure(value, precision = 6) {
    let whole = value / decimal;
    let frac = value % decimal;
    const precisionDecimal = pow10(decimalCount - precision);
    if (frac % precisionDecimal > 0n) { // round up
        frac += precisionDecimal;
        if (frac >= decimal) {
            frac -= decimal;
            whole += 1n;
        }
    }
    frac /= precisionDecimal;
    return `${whole.toString()}${frac !== 0n ? ('.' + frac.toString().padStart(precision, '0').replace(/0+$/, '')) : ''}`;
}
exports.formatCoinsPure = formatCoinsPure;
function formatCoins(value, precision = 6) {
    if (value === undefined)
        return 'N/A';
    return formatCoinsPure(value, precision) + ' TON';
}
function printTransactionFees(transactions) {
    console.table(transactions
        .map((tx) => {
        if (tx.description.type !== 'generic')
            return undefined;
        const body = tx.inMessage?.info.type === 'internal' ? tx.inMessage?.body.beginParse() : undefined;
        const op = body === undefined ? 'N/A' : (body.remainingBits >= 32 ? body.preloadUint(32) : 'no body');
        const totalFees = formatCoins(tx.totalFees.coins);
        const computeFees = formatCoins(tx.description.computePhase.type === 'vm' ? tx.description.computePhase.gasFees : undefined);
        const totalFwdFees = formatCoins(tx.description.actionPhase?.totalFwdFees ?? undefined);
        const valueIn = formatCoins(tx.inMessage?.info.type === 'internal' ? tx.inMessage.info.value.coins : undefined);
        const valueOut = formatCoins(tx.outMessages
            .values()
            .reduce((total, message) => total + (message.info.type === 'internal' ? message.info.value.coins : 0n), 0n));
        const forwardIn = formatCoins(tx.inMessage?.info.type === 'internal' ? tx.inMessage.info.forwardFee : undefined);
        return {
            op: typeof op === 'number' ? ('0x' + op.toString(16)) : op,
            valueIn,
            valueOut,
            totalFees: totalFees,
            inForwardFee: forwardIn,
            outForwardFee: totalFwdFees,
            outActions: tx.description.actionPhase?.totalActions ?? 'N/A',
            computeFee: computeFees,
            exitCode: tx.description.computePhase.type === 'vm' ? tx.description.computePhase.exitCode : 'N/A',
            actionCode: tx.description.actionPhase?.resultCode ?? 'N/A',
        };
    })
        .filter((v) => v !== undefined));
}
exports.printTransactionFees = printTransactionFees;
