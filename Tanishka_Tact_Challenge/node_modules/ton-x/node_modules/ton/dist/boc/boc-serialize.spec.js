"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
const boc_1 = require("./boc");
const topologicalSort_1 = require("./utils/topologicalSort");
describe('boc-serialize', () => {
    it('should correctly serialize', () => {
        const data = 'te6ccgEBGAEA6AACAxDCAQIBY6kNoJVjtnQKS39oygn723awA1zBAUUKFuLnm5heu7OKDFdoYWxlcyBUb2tlbgNXSExAAwEZodzWUAAAAAMgAAADJgQAPh5odHRwczovL3RvbndoYWxlcy5jb20vY29udGVudC8CA8zABQYCASAHCAIBSBQVAgEgCQoCASAPEAALo4AAACzAAgEgCwwACbYAAADDAgFIDQ4ACUAAAAY4AAlQAAAF+AALpgAAADBAAgEgERcCAVgSEwAJQAAABcgACVAAAAXoAAuhgAAALsACASAWFwAJtAAAALcACdgAAALU';
        const dataBuffer = Buffer.from(data, 'base64');
        const cell = (0, boc_1.deserializeBoc)(dataBuffer)[0];
        const data2 = cell.toBoc({ idx: false, crc32: false });
        const cell2 = (0, boc_1.deserializeBoc)(data2)[0];
        const header1 = (0, boc_1.parseBocHeader)(dataBuffer);
        const header2 = (0, boc_1.parseBocHeader)(data2);
        console.warn(header1);
        console.warn(header2);
        const topology = (0, topologicalSort_1.topologicalSort)(cell);
        console.warn(topology.map((v, i) => v.refs));
        // Header 1
        let cells_data = header1.cells_data;
        let cells_array = [];
        let refs_array = [];
        for (let ci = 0; ci < header1.cells_num; ci++) {
            let dd = (0, boc_1.deserializeCellData)(cells_data, header1.size_bytes);
            cells_data = dd.residue;
            cells_array.push(dd.cell);
            refs_array.push(dd.refs);
        }
        console.warn(refs_array);
        let cells_data2 = header2.cells_data;
        let cells_array2 = [];
        let refs_array2 = [];
        for (let ci = 0; ci < header2.cells_num; ci++) {
            let dd = (0, boc_1.deserializeCellData)(cells_data2, header2.size_bytes);
            cells_data2 = dd.residue;
            cells_array2.push(dd.cell);
            refs_array2.push(dd.refs);
        }
        console.warn(refs_array2);
    });
    it('should serialize boc including >255 cells', async () => {
        const data = await (0, promises_1.readFile)(path_1.default.resolve(__dirname, '__testdata__', 'largeBoc.txt'), { encoding: 'utf-8' });
        const dataBuffer = Buffer.from(data, 'base64');
        let boc = (0, boc_1.deserializeBoc)(dataBuffer);
        boc = (0, boc_1.deserializeBoc)(boc[0].toBoc());
    });
});
