"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cell = void 0;
const BitString_1 = require("./BitString");
const boc_1 = require("./boc");
const symbol_inspect_1 = __importDefault(require("symbol.inspect"));
const __1 = require("..");
class Cell {
    constructor(isExotic = false, bits = BitString_1.BitString.alloc(1023)) {
        this.refs = [];
        this[_a] = () => this.toString();
        this.isExotic = isExotic;
        this.bits = bits;
    }
    static fromBoc(src) {
        return (0, boc_1.deserializeBoc)(typeof src === 'string' ? Buffer.from(src, 'hex') : src);
    }
    beginParse() {
        return __1.Slice.fromCell(this);
    }
    writeCell(anotherCell) {
        this.bits.writeBitString(anotherCell.bits);
        for (let r of anotherCell.refs) {
            this.refs.push(r);
        }
    }
    hash() {
        return (0, boc_1.hashCell)(this);
    }
    toBoc(opts) {
        let idx = (opts && opts.idx !== null && opts.idx !== undefined) ? opts.idx : true;
        let crc32 = (opts && opts.crc32 !== null && opts.crc32 !== undefined) ? opts.crc32 : true;
        let cacheBits = (opts && opts.cacheBits !== null && opts.cacheBits !== undefined) ? opts.cacheBits : false;
        let flags = (opts && opts.flags !== null && opts.flags !== undefined) ? opts.flags : 0;
        return (0, boc_1.serializeToBoc)(this, idx, crc32, cacheBits, flags);
    }
    toString(indent) {
        let id = indent || '';
        let s = id + 'x{' + this.bits.toFiftHex() + '}\n';
        for (let k in this.refs) {
            const i = this.refs[k];
            s += i.toString(id + ' ');
        }
        return s;
    }
    withReference(cell) {
        this.refs.push(cell);
        return this;
    }
    withData(src) {
        for (let s of src) {
            if (s === '0') {
                this.bits.writeBit(0);
            }
            else {
                this.bits.writeBit(1);
            }
        }
        return this;
    }
    equals(src) {
        if (src.refs.length !== this.refs.length) {
            return false;
        }
        for (let i = 0; i < src.refs.length; i++) {
            if (!src.refs[i].equals(this.refs[i])) {
                return false;
            }
        }
        return this.bits.equals(src.bits);
    }
}
exports.Cell = Cell;
_a = symbol_inspect_1.default;
