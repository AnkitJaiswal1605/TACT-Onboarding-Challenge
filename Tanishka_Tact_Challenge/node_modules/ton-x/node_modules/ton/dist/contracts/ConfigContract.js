"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigContract = void 0;
const __1 = require("..");
const BitStringReader_1 = require("../boc/BitStringReader");
const parseDict_1 = require("../boc/dict/parseDict");
const configParsing_1 = require("./configs/configParsing");
class ConfigContract {
    constructor(client) {
        this.address = __1.Address.parseRaw('-1:5555555555555555555555555555555555555555555555555555555555555555');
        this.source = new __1.UnknownContractSource('org.ton.config', -1, 'Config Contract');
        this.client = client;
    }
    async getSeqNo() {
        let res = await this.client.callGetMethod(this.address, 'seqno');
        return parseInt(res.stack[0][1], 16);
    }
    async getPublicKey() {
        let data = (await this.client.getContractState(this.address)).data;
        let cell = __1.Cell.fromBoc(data)[0];
        let reader = new BitStringReader_1.BitStringReader(cell.bits);
        reader.readUint(32); // Seqno
        return reader.readUint(256); // Public Key
    }
    async getConfigsRaw() {
        let data = (await this.client.getContractState(this.address)).data;
        let slice = __1.Cell.fromBoc(data)[0].beginParse();
        let dict = slice.readRef();
        let res = (0, parseDict_1.parseDictRefs)(dict, 32);
        return res;
    }
    async getConfigs() {
        let configs = await this.getConfigsRaw();
        return {
            configAddress: (0, configParsing_1.configParseMasterAddressRequired)(configs.get('0')),
            electorAddress: (0, configParsing_1.configParseMasterAddressRequired)(configs.get('1')),
            minterAddress: (0, configParsing_1.configParseMasterAddressRequired)(configs.get('2')),
            feeCollectorAddress: (0, configParsing_1.configParseMasterAddress)(configs.get('3')),
            dnsRootAddress: (0, configParsing_1.configParseMasterAddress)(configs.get('4')),
            globalVersion: (0, configParsing_1.configParse8)(configs.get('8')),
            workchains: (0, configParsing_1.configParse12)(configs.get('12')),
            validators: {
                ...(0, configParsing_1.configParse15)(configs.get('15')),
                ...(0, configParsing_1.configParse16)(configs.get('16')),
                ...(0, configParsing_1.configParse17)(configs.get('17'))
            },
            storagePrices: (0, configParsing_1.configParse18)(configs.get('18')),
            validatorSets: {
                prevValidators: (0, configParsing_1.configParseValidatorSet)(configs.get('32')),
                prevTempValidators: (0, configParsing_1.configParseValidatorSet)(configs.get('33')),
                currentValidators: (0, configParsing_1.configParseValidatorSet)(configs.get('34')),
                currentTempValidators: (0, configParsing_1.configParseValidatorSet)(configs.get('35')),
                nextValidators: (0, configParsing_1.configParseValidatorSet)(configs.get('36')),
                nextTempValidators: (0, configParsing_1.configParseValidatorSet)(configs.get('37'))
            },
            validatorsPunish: (0, configParsing_1.configParse40)(configs.get('40')),
            bridges: {
                ethereum: (0, configParsing_1.configParseBridge)(configs.get('71')),
                binance: (0, configParsing_1.configParseBridge)(configs.get('72')),
                polygon: (0, configParsing_1.configParseBridge)(configs.get('73'))
            },
            gasPrices: {
                masterchain: (0, configParsing_1.configParseGasLImitsPrices)(configs.get('20')),
                workchain: (0, configParsing_1.configParseGasLImitsPrices)(configs.get('21')),
            }
            // TODO: mint_new_price:Grams mint_add_price:Grams = ConfigParam 6;
            // TODO: to_mint:ExtraCurrencyCollection = ConfigParam 7
            // TODO: mandatory_params:(Hashmap 32 True) = ConfigParam 9
            // TODO: critical_params:(Hashmap 32 True) = ConfigParam 10
            // TODO: ConfigVotingSetup = ConfigParam 11
            // TODO: ComplaintPricing = ConfigParam 13
            // TODO: BlockCreateFees = ConfigParam 14
        };
    }
}
exports.ConfigContract = ConfigContract;
