"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletV1R1Source = void 0;
const __1 = require("../..");
class WalletV1R1Source {
    constructor(opts) {
        this.type = 'org.ton.wallets.simple';
        this.walletVersion = 'v1';
        this.backup = () => {
            const store = new __1.ConfigStore();
            store.setInt('wc', this.workchain);
            store.setBuffer('pk', this.publicKey);
            return store.save();
        };
        this.describe = () => {
            return 'Simple Wallet Contract';
        };
        this.publicKey = opts.publicKey;
        this.initialCode = opts.initialCode;
        this.initialData = opts.initialData;
        this.workchain = opts.workchain;
        Object.freeze(this);
    }
    static create(opts) {
        // Resolve parameters
        let publicKey = opts.publicKey;
        let workchain = opts.workchain;
        // Build initial code and data
        let initialCode = __1.Cell.fromBoc('B5EE9C72410101010044000084FF0020DDA4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED5441FDF089')[0];
        let initialData = new __1.Cell();
        initialData.bits.writeUint(0, 32); // SeqNo
        initialData.bits.writeBuffer(publicKey); // Public key
        return new WalletV1R1Source({ publicKey, initialCode, initialData, workchain });
    }
    static restore(backup) {
        const store = new __1.ConfigStore(backup);
        return WalletV1R1Source.create({ publicKey: store.getBuffer('pk'), workchain: store.getInt('wc') });
    }
}
exports.WalletV1R1Source = WalletV1R1Source;
