export declare type TonhubWalletConfig = {
    address: string;
    endpoint: string;
    walletType: string;
    walletConfig: string;
    walletSig: string;
    appPublicKey: string;
};
export declare type TonhubCreatedSession = {
    id: string;
    seed: string;
    link: string;
};
export declare type TonhubSessionStateRevoked = {
    state: 'revoked';
};
export declare type TonhubSessionStateExpired = {
    state: 'expired';
};
export declare type TonhubSessionStateReady = {
    state: 'ready';
    name: string;
    url: string;
    created: number;
    updated: number;
    wallet: TonhubWalletConfig;
};
export declare type TonhubSessionStateIniting = {
    state: 'initing';
    name: string;
    url: string;
    created: number;
    updated: number;
};
export declare type TonhubSessionState = TonhubSessionStateIniting | TonhubSessionStateRevoked | TonhubSessionStateReady;
export declare type TonhubSessionAwaited = TonhubSessionStateRevoked | TonhubSessionStateReady | TonhubSessionStateExpired;
export declare type TonhubTransactionRequest = {
    seed: string;
    appPublicKey: string;
    to: string;
    value: string;
    timeout: number;
    stateInit?: string | null | undefined;
    text?: string | null | undefined;
    payload?: string | null | undefined;
};
export declare type TonhubTransactionResponse = {
    type: 'success';
    response: string;
} | {
    type: 'rejected';
} | {
    type: 'expired';
} | {
    type: 'invalid_session';
};
export declare type TonhubSignRequest = {
    seed: string;
    appPublicKey: string;
    timeout: number;
    text?: string | null | undefined;
    payload?: string | null | undefined;
};
export declare type TonhubSignResponse = {
    type: 'success';
    signature: string;
} | {
    type: 'rejected';
} | {
    type: 'expired';
} | {
    type: 'invalid_session';
};
export declare class TonhubConnector {
    static verifyWalletConfig(session: string, config: TonhubWalletConfig): boolean;
    readonly network: 'mainnet' | 'testnet';
    readonly transport: Transport;
    constructor(args?: {
        network?: 'mainnet' | 'testnet';
        transport?: Transport;
    });
    createNewSession: (args: {
        name: string;
        url: string;
    }) => Promise<TonhubCreatedSession>;
    private ensureSessionStateCorrect;
    getSessionState: (sessionId: string) => Promise<TonhubSessionState>;
    waitForSessionState: (sessionId: string, lastUpdated?: number | undefined) => Promise<TonhubSessionState>;
    awaitSessionReady: (sessionId: string, timeout: number, lastUpdated?: number | undefined) => Promise<TonhubSessionAwaited>;
    requestTransaction: (request: TonhubTransactionRequest) => Promise<TonhubTransactionResponse>;
    requestSign: (request: TonhubSignRequest) => Promise<TonhubSignResponse>;
    private _awaitJobState;
    private _getJobState;
}
