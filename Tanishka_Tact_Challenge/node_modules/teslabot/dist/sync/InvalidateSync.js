"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidateSync = void 0;
const backoff_1 = require("../timer/backoff");
class InvalidateSync {
    constructor(command, opts) {
        this._invalidated = false;
        this._invalidatedDouble = false;
        this._stopped = false;
        this._doSync = () => __awaiter(this, void 0, void 0, function* () {
            yield this._backoff(() => __awaiter(this, void 0, void 0, function* () {
                if (this._stopped) {
                    return;
                }
                yield this._command();
            }));
            if (this._stopped) {
                return;
            }
            if (this._invalidatedDouble) {
                this._invalidatedDouble = false;
                this._doSync();
            }
            else {
                this._invalidated = false;
            }
        });
        this._backoff = opts && opts.backoff ? opts.backoff : (0, backoff_1.createBackoff)();
        this._command = command;
    }
    invalidate() {
        if (this._stopped) {
            return;
        }
        if (!this._invalidated) {
            this._invalidated = true;
            this._invalidatedDouble = false;
            this._doSync();
        }
        if (!this._invalidatedDouble) {
            this._invalidatedDouble = true;
        }
    }
    stop() {
        if (this._stopped) {
            return;
        }
        this._stopped = true;
    }
}
exports.InvalidateSync = InvalidateSync;
//# sourceMappingURL=InvalidateSync.js.map