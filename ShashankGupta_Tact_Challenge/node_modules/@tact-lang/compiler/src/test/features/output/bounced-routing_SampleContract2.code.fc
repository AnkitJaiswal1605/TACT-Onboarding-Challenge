#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "bounced-routing_SampleContract2.headers.fc";
#include "bounced-routing_SampleContract2.stdlib.fc";
#include "bounced-routing_SampleContract2.constants.fc";
#include "bounced-routing_SampleContract2.storage.fc";

;;
;; Contract SampleContract2 functions
;;

tuple $SampleContract2$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

;;
;; Receivers of a Contract SampleContract2
;;

((tuple), ()) %$SampleContract2$_internal_empty(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

((tuple), ()) $SampleContract2$_internal_binary_First(tuple $self, (int, int, int, slice) $msg) impure inline {
    var $self = $self;
    var ($msg'amount, $msg'myCoins, $msg'myBool3, $msg'anAddress) = $msg;
    __tact_debug_str(__gen_slice_string_94c3f101bbe94a48f10dfe5c99449522d57da3d3f44d711da4395dcd9cf8c814());
    throw(144);
    return ($self, ());
}

((tuple), ()) $SampleContract2$_internal_binary_Second(tuple $self, (int, int, int, slice, int, (int), (int)) $msg) impure inline {
    var $self = $self;
    var ($msg'amount_bigger, $msg'myBool, $msg'thisDoesNotFit, $msg'myAddress, $msg'myBool2, ($msg'myStruct'amount), ($msg'myStruct2'amount)) = $msg;
    __tact_debug_str(__gen_slice_string_b959dde8a8be0822e78951cc7690fb5182b435b11cc70c801cf2a2b3e9b1e40b());
    throw(145);
    return ($self, ());
}

;;
;; Get methods of a Contract SampleContract2
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmUrkV5CAwrvAEutesNUv5wHugKfvDMy3YdynJMDbNj3CS";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleContract2
;;

(tuple, int) $SampleContract2$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$SampleContract2$_internal_empty();
        return (self, true);
    }
    
    ;; Receive First message
    if (op == 3200290616) {
        var msg = in_msg~$First$_load();
        self~$SampleContract2$_internal_binary_First(msg);
        return (self, true);
    }
    
    ;; Receive Second message
    if (op == 391585480) {
        var msg = in_msg~$Second$_load();
        self~$SampleContract2$_internal_binary_Second(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleContract2$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleContract2$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleContract2$_contract_store(self);
}
