"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeFileSystem = exports.run = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const parseConfig_1 = require("./config/parseConfig");
const createNodeFileSystem_1 = require("./vfs/createNodeFileSystem");
const build_1 = require("./pipeline/build");
const logger_1 = require("./logger");
async function run(args) {
    // Load config
    let resolvedPath = path_1.default.resolve(args.configPath);
    let rootPath = path_1.default.dirname(resolvedPath);
    let config;
    if (!fs_1.default.existsSync(resolvedPath)) {
        console.warn('Unable to find config file at ' + resolvedPath);
        return false;
    }
    try {
        config = (0, parseConfig_1.parseConfig)(fs_1.default.readFileSync(resolvedPath, 'utf8'));
    }
    catch (e) {
        console.log(e);
        console.warn('Unable to parse config file at ' + resolvedPath);
        return false;
    }
    // Resolve projects
    let projects = config.projects;
    if (args.projectNames && args.projectNames.length > 0) {
        // Check that all proejct names are valid
        for (let pp of args.projectNames) {
            if (!projects.find((v) => v.name === pp)) {
                console.warn('Unable to find project ' + pp);
                return false;
            }
        }
        // Filter by names
        projects = projects.filter((v) => args.projectNames.includes(v.name));
    }
    if (projects.length === 0) {
        console.warn('No projects to compile');
        return false;
    }
    // Compile 
    let success = true;
    let project = (0, createNodeFileSystem_1.createNodeFileSystem)(rootPath, false);
    let stdlib = (0, createNodeFileSystem_1.createNodeFileSystem)(path_1.default.resolve(__dirname, '..', 'stdlib'), false); // Improves developer experience
    for (let config of projects) {
        console.log('ðŸ’¼ Compiling project ' + config.name + '...');
        let built = await (0, build_1.build)({ config, project, stdlib, logger: logger_1.consoleLogger });
        success = success && built;
    }
    return success;
}
exports.run = run;
var createNodeFileSystem_2 = require("./vfs/createNodeFileSystem");
Object.defineProperty(exports, "createNodeFileSystem", { enumerable: true, get: function () { return createNodeFileSystem_2.createNodeFileSystem; } });
