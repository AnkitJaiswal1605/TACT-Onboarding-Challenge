"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ConfigStore_map;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigStore = void 0;
const __1 = require("..");
class ConfigStore {
    constructor(source) {
        _ConfigStore_map.set(this, new Map());
        this.getString = (key) => {
            let ex = __classPrivateFieldGet(this, _ConfigStore_map, "f").get(key);
            if (!ex) {
                throw Error('Unable to find key ' + key);
            }
            return ex;
        };
        this.getBuffer = (key) => {
            return Buffer.from(this.getString(key), 'hex');
        };
        this.getAddress = (key) => {
            return __1.Address.parseFriendly(this.getString(key)).address;
        };
        this.getInt = (key) => {
            return parseInt(this.getString(key));
        };
        this.setBuffer = (key, value) => {
            this.setString(key, value.toString('hex'));
        };
        this.setAddress = (key, address) => {
            this.setString(key, address.toFriendly());
        };
        if (source) {
            let parts = source.split(',');
            for (let p of parts) {
                let pp = p.split('=');
                if (pp.length !== 2) {
                    throw Error('Mailformed input');
                }
                if (__classPrivateFieldGet(this, _ConfigStore_map, "f").has(pp[0])) {
                    throw Error('Mailformed input');
                }
                __classPrivateFieldGet(this, _ConfigStore_map, "f").set(pp[0], pp[1]);
            }
        }
    }
    setString(key, value) {
        if (key.indexOf('=') >= 0 || key.indexOf(',') >= 0) {
            throw Error('Mailformed input');
        }
        if (value.indexOf('=') >= 0 || value.indexOf(',') >= 0) {
            throw Error('Mailformed input');
        }
        __classPrivateFieldGet(this, _ConfigStore_map, "f").set(key, value);
    }
    setInt(key, value) {
        this.setString(key, value.toString(10));
    }
    save() {
        let res = '';
        for (let e of __classPrivateFieldGet(this, _ConfigStore_map, "f")) {
            if (res !== '') {
                res += ',';
            }
            res += e[0] + '=' + e[1];
        }
        return res;
    }
}
exports.ConfigStore = ConfigStore;
_ConfigStore_map = new WeakMap();
