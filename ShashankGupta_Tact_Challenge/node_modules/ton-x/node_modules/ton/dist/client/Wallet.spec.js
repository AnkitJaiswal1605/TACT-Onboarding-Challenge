"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const awaitBalance_1 = require("../tests/awaitBalance");
const createTestClient_1 = require("../tests/createTestClient");
const openTestTreasure_1 = require("../tests/openTestTreasure");
const convert_1 = require("../utils/convert");
describe('Wallet', () => {
    it('should return zero when trying to get seqno of unintitialized contract', async () => {
        const client = (0, createTestClient_1.createTestClient)();
        const wallet = await client.createNewWallet({ workchain: 0 });
        expect(await wallet.wallet.getSeqNo()).toBe(0);
    });
    it('should return valid seqno on initialized contract', async () => {
        const client = (0, createTestClient_1.createTestClient)();
        let treasure = await (0, openTestTreasure_1.openTestTreasure)(client);
        let seqno = await treasure.wallet.getSeqNo();
        expect(seqno).toBeGreaterThan(5);
    });
    it('should trasnfer', async () => {
        const client = (0, createTestClient_1.createTestClient)();
        let treasure = await (0, openTestTreasure_1.openTestTreasure)(client);
        let dest = __1.Address.parseFriendly('EQClZ-KEDodcnyoyPX7c0qBBQ9QePzzquVwKuaqHk7F01825').address;
        let balance = await client.getBalance(dest);
        let seqno = await treasure.wallet.getSeqNo();
        await treasure.wallet.transfer({
            to: dest,
            value: (0, convert_1.toNano)(0.05),
            bounce: false,
            seqno,
            secretKey: treasure.secretKey
        });
        await (0, awaitBalance_1.awaitBalance)(client, dest, balance);
    }, 60000);
    it('should trasnfer with comment', async () => {
        const client = (0, createTestClient_1.createTestClient)();
        let treasure = await (0, openTestTreasure_1.openTestTreasure)(client);
        let dest = __1.Address.parseFriendly('EQClZ-KEDodcnyoyPX7c0qBBQ9QePzzquVwKuaqHk7F01825').address;
        let balance = await client.getBalance(dest);
        let seqno = await treasure.wallet.getSeqNo();
        await treasure.wallet.transfer({
            to: dest,
            value: (0, convert_1.toNano)(0.05),
            bounce: false,
            seqno,
            secretKey: treasure.secretKey,
            payload: 'Hello World!'
        });
        await (0, awaitBalance_1.awaitBalance)(client, dest, balance);
    }, 60000);
    it('should trasnfer by stages', async () => {
        const client = (0, createTestClient_1.createTestClient)();
        let treasure = await (0, openTestTreasure_1.openTestTreasure)(client);
        let dest = __1.Address.parseFriendly('EQClZ-KEDodcnyoyPX7c0qBBQ9QePzzquVwKuaqHk7F01825').address;
        let balance = await client.getBalance(dest);
        // Prepare
        let seqno = await treasure.wallet.getSeqNo();
        // Sign
        let signed = await treasure.wallet.transferSign({
            to: dest,
            bounce: false,
            value: (0, convert_1.toNano)(0.05),
            seqno,
            secretKey: treasure.secretKey
        });
        // Send
        await treasure.wallet.prepare(0, treasure.publicKey, 'org.ton.wallets.v3');
        await treasure.wallet.transferCommit(signed);
        // Await balance
        await (0, awaitBalance_1.awaitBalance)(client, dest, balance);
    }, 60000);
});
