"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = require("bn.js");
const __1 = require("../..");
const Cell_1 = require("../../boc/Cell");
const convert_1 = require("../../utils/convert");
const CommonMessageInfo_1 = require("../../messages/CommonMessageInfo");
const EmptyMessage_1 = require("../../messages/EmptyMessage");
const InternalMessage_1 = require("../../messages/InternalMessage");
const WalletV3SigningMessage_1 = require("./WalletV3SigningMessage");
const NativeContract = require('tonweb').Contract;
const NativeAddress = require('tonweb').Address;
const NativeCell = require('tonweb').boc.Cell;
describe('WalletV3SigningMessage', () => {
    it('should comform to tonweb implementation', async () => {
        function createSigningMessage(seqno) {
            seqno = seqno || 0;
            const message = new NativeCell();
            message.bits.writeUint(698983191, 32);
            if (seqno === 0) {
                // message.bits.writeInt(-1, 32);// todo: dont work
                for (let i = 0; i < 32; i++) {
                    message.bits.writeBit(1);
                }
            }
            else {
                const date = new Date();
                const timestamp = Math.floor(date.getTime() / 1e3);
                message.bits.writeUint(timestamp + 60, 32);
            }
            message.bits.writeUint(seqno, 32);
            return message;
        }
        const address = 'EQDR4neQzqkfEz0oR3hXBcJph64d5NddP8H8wfN0thQIAqDH';
        const amount = (0, convert_1.toNano)(0.001);
        const sendMode = 3;
        const seqno = 10;
        const orderHeader = NativeContract.createInternalMessageHeader(new NativeAddress(__1.Address.parseFriendly(address).address.toFriendly({ 'bounceable': false })), new bn_js_1.BN(amount));
        const order = NativeContract.createCommonMsgInfo(orderHeader, null, new NativeCell());
        const signingMessage = createSigningMessage(seqno);
        signingMessage.bits.writeUint8(sendMode);
        signingMessage.refs.push(order);
        const signingMessage2 = new WalletV3SigningMessage_1.WalletV3SigningMessage({
            seqno: seqno,
            sendMode: sendMode,
            order: new InternalMessage_1.InternalMessage({
                to: __1.Address.parseFriendly(address).address,
                value: amount,
                bounce: false,
                body: new CommonMessageInfo_1.CommonMessageInfo({ body: new EmptyMessage_1.EmptyMessage() })
            })
        });
        const signCell = new Cell_1.Cell();
        signingMessage2.writeTo(signCell);
        expect(signCell.toString()).toEqual(signingMessage.print());
    });
});
