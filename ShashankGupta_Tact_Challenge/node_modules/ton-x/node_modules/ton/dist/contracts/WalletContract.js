"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletContract = void 0;
const createWalletTransfer_1 = require("./messages/createWalletTransfer");
const contractAddress_1 = require("./contractAddress");
class WalletContract {
    constructor(client, source, address) {
        this.client = client;
        this.address = address;
        this.source = source;
    }
    static create(client, source) {
        let address = (0, contractAddress_1.contractAddress)(source);
        return new WalletContract(client, source, address);
    }
    async getSeqNo() {
        if (await this.client.isContractDeployed(this.address)) {
            let res = await this.client.callGetMethod(this.address, 'seqno');
            return parseInt(res.stack[0][1], 16);
        }
        else {
            return 0;
        }
    }
    createTransfer(args) {
        switch (this.source.walletVersion) {
            case 'v1':
                return (0, createWalletTransfer_1.createWalletTransferV1)({ seqno: args.seqno, sendMode: args.sendMode, secretKey: args.secretKey, order: args.order });
            case 'v2':
                return (0, createWalletTransfer_1.createWalletTransferV2)({ seqno: args.seqno, sendMode: args.sendMode, secretKey: args.secretKey, order: args.order, timeout: args.timeout });
            case 'v3':
                return (0, createWalletTransfer_1.createWalletTransferV3)({ seqno: args.seqno, sendMode: args.sendMode, secretKey: args.secretKey, order: args.order, walletId: this.source.walletId, timeout: args.timeout });
            default:
                throw Error('Unknown contract type: ' + this.source.type);
        }
    }
}
exports.WalletContract = WalletContract;
