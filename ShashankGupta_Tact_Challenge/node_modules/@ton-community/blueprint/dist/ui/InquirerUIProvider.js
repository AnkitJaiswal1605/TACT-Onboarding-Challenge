"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _InquirerUIProvider_bottomBar;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InquirerUIProvider = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
class DestroyableBottomBar extends inquirer_1.default.ui.BottomBar {
    destroy() {
        this.close();
    }
}
class InquirerUIProvider {
    constructor() {
        _InquirerUIProvider_bottomBar.set(this, void 0);
        __classPrivateFieldSet(this, _InquirerUIProvider_bottomBar, new DestroyableBottomBar(), "f");
    }
    write(message) {
        __classPrivateFieldGet(this, _InquirerUIProvider_bottomBar, "f").log.write(message);
    }
    async prompt(message) {
        const { prompt } = await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'prompt',
            message,
        });
        return prompt;
    }
    async input(message) {
        const { val } = await inquirer_1.default.prompt({
            name: 'val',
            message: message,
        });
        return val;
    }
    async choose(message, choices, display) {
        const { choice } = await inquirer_1.default.prompt([
            {
                type: 'list',
                name: 'choice',
                message: message,
                choices: choices.map((c) => ({ name: display(c), value: c })),
            },
        ]);
        return choice;
    }
    setActionPrompt(message) {
        __classPrivateFieldGet(this, _InquirerUIProvider_bottomBar, "f").updateBottomBar(message);
    }
    clearActionPrompt() {
        __classPrivateFieldGet(this, _InquirerUIProvider_bottomBar, "f").updateBottomBar('');
    }
    close() {
        __classPrivateFieldGet(this, _InquirerUIProvider_bottomBar, "f").destroy();
    }
}
exports.InquirerUIProvider = InquirerUIProvider;
_InquirerUIProvider_bottomBar = new WeakMap();
